{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport axios from 'axios'; // react components used to create a google map\n\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\"; // @material-ui/icons\n\nimport PinDrop from \"@material-ui/icons/PinDrop\";\nimport Phone from \"@material-ui/icons/Phone\";\nimport Check from \"@material-ui/icons/Check\";\nimport Email from \"@material-ui/icons/Email\";\nimport EventIcon from '@material-ui/icons/Event';\nimport Favorite from \"@material-ui/icons/Favorite\";\nimport AssignmentInd from \"@material-ui/icons/AssignmentInd\"; // core components\n\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport InfoArea from \"components/InfoArea/InfoArea.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport CardFooter from \"components/Card/CardFooter.js\";\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport SnackbarContent from \"components/Snackbar/SnackbarContent.js\";\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Grow from '@material-ui/core/Grow';\nimport InputMask from \"react-input-mask\";\nimport MaskedInput from 'react-text-mask';\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from '@hookform/resolvers';\nimport * as yup from \"yup\";\nimport { setLocale } from 'yup';\nimport checkoutStyle from \"assets/jss/nextjs-material-kit-pro/pages/checkoutSections/checkoutStyle.js\";\nimport city from \"assets/img/examples/city.jpg\";\nvar useStyles = makeStyles(checkoutStyle);\n\nfunction TextMaskCustom(props) {\n  var inputRef = props.inputRef,\n      other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return __jsx(MaskedInput, _extends({}, other, {\n    ref: function ref(_ref2) {\n      inputRef(_ref2 ? _ref2.inputElement : null);\n    },\n    mask: [/[0-9]/, /[0-9]/, /[0-9]/, '.', /[0-9]/, /[0-9]/, /[0-9]/, '.', /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/] // placeholderChar={'\\u2000'}\n    ,\n    showMask: true\n  }));\n}\n\nfunction PhoneMask(props) {\n  var inputRef = props.inputRef,\n      other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return __jsx(MaskedInput, _extends({}, other, {\n    ref: function ref(_ref3) {\n      inputRef(_ref3 ? _ref3.inputElement : null);\n    },\n    mask: ['(', /[1-9]/, /[0-9]/, ')', ' ', /[1-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/] // placeholderChar={'\\u2000'}\n    ,\n    showMask: true\n  }));\n}\n\nfunction DateMask(props) {\n  var inputRef = props.inputRef,\n      other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return __jsx(MaskedInput, _extends({}, other, {\n    ref: function ref(_ref4) {\n      inputRef(_ref4 ? _ref4.inputElement : null);\n    } // mask={['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]}\n    ,\n    mask: [/\\d/, /\\d/, '/', /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/] // placeholderChar={'\\u2000'}\n    ,\n    showMask: true\n  }));\n}\n\nsetLocale({\n  mixed: {\n    notType: function notType(_ref) {\n      switch (_ref.type) {\n        case 'number':\n          return 'deve ser um número';\n\n        case 'string':\n          return 'deve ser um texto';\n\n        default:\n          return 'formato errado';\n      }\n    },\n    default: 'é inválido',\n    required: 'Desculpe, este campo é obrigatório',\n    oneOf: 'deve ser um dos seguintes valores: ${values}',\n    notOneOf: 'não pode ser um dos seguintes valores: ${values}'\n  },\n  string: {\n    length: 'deve ter exatamente ${length} caracteres',\n    min: 'deve ter pelo menos ${min} caracteres',\n    max: 'deve ter no máximo ${max} caracteres',\n    email: 'Por favor, informe um e-mail inválido',\n    url: 'deve ter um formato de URL válida',\n    trim: 'não deve conter espaços no início ou no fim.',\n    lowercase: 'deve estar em maiúsculo',\n    uppercase: 'deve estar em minúsculo'\n  },\n  number: {\n    min: 'deve ser no mínimo ${min}',\n    max: 'deve ser no máximo ${max}',\n    lessThan: 'deve ser menor que ${less}',\n    moreThan: 'deve ser maior que ${more}',\n    notEqual: 'não pode ser igual à ${notEqual}',\n    positive: 'deve ser um número posítivo',\n    negative: 'deve ser um número negativo',\n    integer: 'deve ser um número inteiro'\n  },\n  date: {\n    min: 'deve ser maior que a data ${min}',\n    max: 'deve ser menor que a data ${max}'\n  },\n  array: {\n    min: 'deve ter no mínimo ${min} itens',\n    max: 'deve ter no máximo ${max} itens'\n  }\n});\nvar regexCPF = /([0-9]{2}[\\.]?[0-9]{3}[\\.]?[0-9]{3}[\\/]?[0-9]{4}[-]?[0-9]{2})|([0-9]{3}[\\.]?[0-9]{3}[\\.]?[0-9]{3}[-]?[0-9]{2})/gm;\n\nfunction cpfValidate(cpf) {\n  console.log(\"Validatring\", cpf);\n  return cpf.length > 10;\n}\n\nfunction isValidCPF(cpf) {\n  if (typeof cpf !== \"string\") return false;\n  cpf = cpf.replace(/[\\s.-]*/igm, '');\n\n  if (!cpf || cpf.length != 11 || cpf == \"00000000000\" || cpf == \"11111111111\" || cpf == \"22222222222\" || cpf == \"33333333333\" || cpf == \"44444444444\" || cpf == \"55555555555\" || cpf == \"66666666666\" || cpf == \"77777777777\" || cpf == \"88888888888\" || cpf == \"99999999999\") {\n    return false;\n  }\n\n  var soma = 0;\n  var resto;\n\n  for (var i = 1; i <= 9; i++) {\n    soma = soma + parseInt(cpf.substring(i - 1, i)) * (11 - i);\n  }\n\n  resto = soma * 10 % 11;\n  if (resto == 10 || resto == 11) resto = 0;\n  if (resto != parseInt(cpf.substring(9, 10))) return false;\n  soma = 0;\n\n  for (var i = 1; i <= 10; i++) {\n    soma = soma + parseInt(cpf.substring(i - 1, i)) * (12 - i);\n  }\n\n  resto = soma * 10 % 11;\n  if (resto == 10 || resto == 11) resto = 0;\n  if (resto != parseInt(cpf.substring(10, 11))) return false;\n  return true;\n}\n\nfunction isValidPhone(phone) {\n  return /^(?:(?:\\+|00)?(55)\\s?)?(?:\\(?([1-9][0-9])\\)?\\s?)?(?:((?:9\\d|[2-9])\\d{3})\\-?(\\d{4}))$/.test(phone);\n}\n\nfunction isValidDate(date) {\n  return /^((((0?[1-9]|[12]\\d|3[01])[\\.\\-\\/](0?[13578]|1[02])      [\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|((0?[1-9]|[12]\\d|30)[\\.\\-\\/](0?[13456789]|1[012])[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|((0?[1-9]|1\\d|2[0-8])[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|(29[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00)))|(((0[1-9]|[12]\\d|3[01])(0[13578]|1[02])((1[6-9]|[2-9]\\d)?\\d{2}))|((0[1-9]|[12]\\d|30)(0[13456789]|1[012])((1[6-9]|[2-9]\\d)?\\d{2}))|((0[1-9]|1\\d|2[0-8])02((1[6-9]|[2-9]\\d)?\\d{2}))|(2902((1[6-9]|[2-9]\\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00))))$/.test(date);\n}\n\nyup.addMethod(yup.string, \"cpf\", function (message) {\n  // return yup.mixed().test(\"cpf\", message || \"número de CPF inválido\", value => cpfValidate(value));\n  return yup.mixed().test(\"cpf\", message || \"número de CPF inválido\", function (value) {\n    return isValidCPF(value);\n  });\n});\nyup.addMethod(yup.string, \"phone\", function (message) {\n  return yup.mixed().test(\"phone\", message || \"número de celular inválido\", function (value) {\n    return isValidPhone(value);\n  });\n});\nyup.addMethod(yup.string, \"date\", function (message) {\n  return yup.mixed().test(\"date\", message || \"data inválida\", function (value) {\n    return isValidDate(value);\n  });\n}); // const SignupSchema = yup.object().shape({\n//   // firstName: yup.string().required(),\n//   cpf: yup\n//     .string()\n//     // .required(), \n// \t\t// .transform(function removeNonNumericalChar(value) {\n// \t\t// \tconsole.log(\"Transforming\", value);\n// \t\t// \treturn this.isType(value) && value !== null ? value.replace(/\\D/g, \"\") : value;\n// \t\t// })\n// \t\t// .matches(regexCPF, \"formato inválido\")\n//     .cpf(\"informe um CPF válido\")\n//     ,\n//   first: yup\n//     .string()\n//     .required(),  \n//   // email: yup.string().required(),\n//   last: yup\n//     .number()\n//     // .required()\n//     .positive()\n//     .integer(),    \n//   // message: yup.string().url(),\n//   // checkboxInput: yup.boolean().oneOf([true],'aceite obrigatório')\n// });\n\nvar SignupSchema = yup.object().shape({\n  cpf: yup.string().cpf(\"Por favor, informe um CPF válido\"),\n  nome: yup.string().required(),\n  email: yup.string().required().email(),\n  telefone: yup.string().phone(\"Por favor, informe um número de celular válido\"),\n  dataNascimento: yup.string().date(\"Por favor, informe uma data válida\"),\n  cep: yup.string().required(),\n  endereco: yup.string().required(),\n  numero: yup.number().required(),\n  complemento: yup.string(),\n  bairro: yup.string().required(),\n  estado: yup.string().required(),\n  cidade: yup.string().required() // receberContatoEmail: yup.boolean().oneOf([true],'aceite obrigatório'),\n  // receberContatoSMS: yup.boolean().oneOf([true],'aceite obrigatório'),\n  // receberContatoWhatsApp: yup.boolean().oneOf([true],'aceite obrigatório')\n\n}); // const schema = yup.object().shape({\n//   first: yup.string().required(),\n//   age: yup.number().positive().integer().required(),\n// });\n\nexport default function SectionAnamnese(props) {\n  // const { register, errors, handleSubmit} = useForm({\n  //   validationSchema: SignupSchema\n  // });\n  var _useForm = useForm({\n    resolver: yupResolver(SignupSchema),\n    mode: \"onBlur\" // mode: \"onChange\"\n\n  }),\n      register = _useForm.register,\n      trigger = _useForm.trigger,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors;\n\n  var onSubmit = function onSubmit(data) {\n    console.log(data); // alert(JSON.stringify(data, null));\n  };\n\n  useEffect(function () {// history.pushState({}, null, \"/anamnese\")\n  }, []);\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      checked = _React$useState2[0],\n      setChecked = _React$useState2[1];\n\n  var handleToggle = function handleToggle(value) {\n    var currentIndex = checked.indexOf(value);\n\n    var newChecked = _toConsumableArray(checked);\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isAluno = _React$useState4[0],\n      setIsAluno = _React$useState4[1];\n\n  var _React$useState5 = React.useState(0),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      activeForm = _React$useState6[0],\n      setActiveForm = _React$useState6[1]; // const [activeField, setActiveField] = React.useState(\"first\");\n\n\n  var _React$useState7 = React.useState([\"idade\", \"sexo\"]),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      activeField = _React$useState8[0],\n      setActiveField = _React$useState8[1];\n\n  var _React$useState9 = React.useState(true),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      isDisableNext = _React$useState10[0],\n      setIsDisableNext = _React$useState10[1];\n\n  var _useState = useState(false),\n      error = _useState[0],\n      setError = _useState[1];\n\n  var handleNext = function handleNext(type) {\n    var result;\n    return _regeneratorRuntime.async(function handleNext$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // console.log(activeField);\n            // const result = await trigger(activeField)\n            // console.log(result);\n            result = true;\n\n            if (result) {\n              if (activeForm == 15) {\n                props.setStepCheckout(3);\n              } else {\n                setActiveForm(function (prevActiveStep) {\n                  return prevActiveStep + 1;\n                });\n                handleFieldActive(activeForm + 1);\n              }\n            } // setActiveForm((prevActiveStep) => prevActiveStep + 1);\n\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleBack = function handleBack(type) {\n    if (activeForm !== 0) {\n      setActiveForm(function (prevActiveStep) {\n        return prevActiveStep - 1;\n      });\n      handleFieldActive(activeForm - 1);\n    }\n  };\n\n  var handleFocus = function handleFocus(event) {\n    // event.target.select()\n    event.target.selectionStart = 0;\n    event.target.selectionEnd = 0;\n  };\n\n  var handleFieldActive = function handleFieldActive(step) {\n    console.log(\"handleFieldActive\");\n\n    switch (step) {\n      case 0:\n        // setActiveField(\"first\");\n        setActiveField(\"cpf\");\n        break;\n\n      case 1:\n        setActiveField([\"nome\", \"email\", \"telefone\", \"dataNascimento\"]);\n        break;\n\n      case 2:\n        setActiveField([\"cep\", \"endereco\", \"numero\", \"complemento\", \"bairro\", \"estado\", \"cidade\"]);\n        break;\n\n      default:\n        setActiveField(\"cpf\");\n        break;\n    }\n\n    console.log(step); // console.log(activeField);\n  }; // useEffect(() => {\n  //   console.log(\"teste de erro\");\n  //   console.log(errors[activeField]);  \n  //   !errors[activeField] && setIsDisableNext(false);\n  // }, [ errors[activeField] ]);\n  // useEffect(() => {\n  //   console.log(\"teste de field\");\n  //   console.log(activeField);    \n  // }, [ activeField ]);\n\n\n  var _React$useState11 = React.useState({\n    idade: \"\",\n    sexo: \"\",\n    peso: \"\",\n    altura: \"\",\n    objetivo: \"\",\n    habitoTreino: \"\",\n    frequenciaTreino: \"\",\n    fazMusculacao: \"\",\n    fazAulas: \"\",\n    sedentario: \"\",\n    sedentarioTempo: \"\",\n    reclusaoTreino: \"\",\n    tempoPorDia: \"\",\n    periodo: \"\",\n    patologia: \"\",\n    outroPatologia: \"\",\n    osseoArticular: \"\",\n    qualOsseoArticular: \"\",\n    cirurgia: \"\",\n    qualCirurgia: \"\",\n    internacao: \"\",\n    qualInternacao: \"\",\n    medicamento: \"\",\n    qualMedicamento: \"\",\n    fuma: \"\",\n    nutricionista: \"\",\n    personalTrainer: \"\",\n    equipamentos: \"\"\n  }),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      anamnese = _React$useState12[0],\n      setAnamnese = _React$useState12[1];\n\n  var fetchData = function fetchData(event) {\n    var cep;\n    return _regeneratorRuntime.async(function fetchData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setError(false);\n            cep = event.target.value;\n            setAnamnese(function (prevAnamnese) {\n              return _objectSpread({}, prevAnamnese, {\n                endereco: \"\",\n                bairro: \"\",\n                estado: \"\",\n                cidade: \"\"\n              });\n            });\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(axios.get(\"https://viacep.com.br/ws/\".concat(cep, \"/json/\")).then(function (res) {\n              // setError(false);\n              // setUsers(prevState => [...prevState, ...res.data]);\n              // setUser(res.data);\n              // console.log(res.data);\n              if (res.data.error) {\n                setError(true);\n                return;\n              }\n\n              setAnamnese(function (prevAnamnese) {\n                return _objectSpread({}, prevAnamnese, {\n                  cep: res.data.cep,\n                  endereco: res.data.logradouro,\n                  bairro: res.data.bairro,\n                  estado: res.data.uf,\n                  cidade: res.data.localidade\n                });\n              }); // console.log(res.data.cliente);     \n            }).catch(function (error) {\n              console.log(error);\n              setError(true);\n            }).finally(function () {// setLoading(false);\n            }));\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var classes = useStyles();\n  return __jsx(\"div\", {\n    className: \"cd-section\"\n  }, __jsx(\"div\", {\n    className: classes.contacts + \" \" + classes.section // style={{ backgroundImage: `url(${city})` }}\n    ,\n    style: {\n      backgroundColor: \"#ffffff\"\n    }\n  }, __jsx(\"div\", {\n    className: classes.container\n  }, __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 5\n  }, __jsx(Grow, _extends({\n    in: true,\n    style: {\n      transformOrigin: '0 0 0'\n    }\n  }, true ? {\n    timeout: 1000\n  } : {}), __jsx(Card, {\n    className: classes.card1\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(CardHeader, {\n    contact: true,\n    color: \"primary\",\n    className: classes.textCenter\n  }, __jsx(\"h4\", {\n    className: classes.cardTitle\n  }, \"Anamnese\")), __jsx(Grow, _extends({\n    in: activeForm === 0,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 0 ? \"block\" : \"none\"\n    }\n  }, activeForm === 0 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 8,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Qual \\xE9 sua idade?\",\n    labelError: errors.idade && errors.idade.message,\n    id: \"idade\",\n    error: errors.idade ? true : false,\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"idade\",\n      inputRef: register //   onFocus: handleFocus,\n      //   inputComponent: TextMaskCustom,\n      //   startAdornment: (\n      //     <InputAdornment position=\"start\">\n      //       <AssignmentInd className={classes.inputIconsColor} />\n      //     </InputAdornment>\n      //   ) \n\n    }\n  }), __jsx(CustomInput, {\n    labelText: \"Qual seu g\\xEAnero?\",\n    labelError: errors.sexo && errors.sexo.message,\n    id: \"sexo\",\n    error: errors.sexo ? true : false,\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"sexo\",\n      inputRef: register //   onFocus: handleFocus,\n      //   inputComponent: TextMaskCustom,\n      //   startAdornment: (\n      //     <InputAdornment position=\"start\">\n      //       <AssignmentInd className={classes.inputIconsColor} />\n      //     </InputAdornment>\n      //   ) \n\n    }\n  }))))), __jsx(Grow, _extends({\n    in: activeForm === 1,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 1 ? \"block\" : \"none\"\n    }\n  }, activeForm === 1 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 8,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Qual \\xE9 o seu peso?\",\n    labelError: errors.peso && errors.peso.message,\n    error: errors.peso ? true : false,\n    id: \"peso\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"peso\",\n      inputRef: register //   startAdornment: (\n      //     <InputAdornment position=\"start\">\n      //       <AssignmentInd className={classes.inputIconsColor} />\n      //     </InputAdornment>\n      //   )                           \n\n    }\n  }), __jsx(CustomInput, {\n    labelText: \"Qual a sua altura? \",\n    labelError: errors.altura && errors.altura.message,\n    error: errors.altura ? true : false,\n    id: \"altura\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"altura\",\n      inputRef: register //   startAdornment: (\n      //     <InputAdornment position=\"start\">\n      //       <Email className={classes.inputIconsColor} />\n      //     </InputAdornment>\n      //   )                                                        \n\n    }\n  }))))), __jsx(Grow, _extends({\n    in: activeForm === 2,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 2 ? \"block\" : \"none\"\n    }\n  }, activeForm === 2 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Qual \\xE9 o seu objetivo?\",\n    labelError: errors.objetivo && errors.objetivo.message,\n    error: errors.objetivo ? true : false,\n    id: \"objetivo\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"objetivo\",\n      inputRef: register //   onBlur: fetchData,\n      //   startAdornment: (\n      //     <InputAdornment position=\"start\">\n      //       <AssignmentInd className={classes.inputIconsColor} />\n      //     </InputAdornment>\n      //   )                           \n\n    }\n  }))))), __jsx(Grow, _extends({\n    in: activeForm === 3,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 3 ? \"block\" : \"none\"\n    }\n  }, activeForm === 3 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(\"label\", null, \"Possui o h\\xE1bito de treinar?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: handleNext\n  }, \"Sim\"), __jsx(Button, {\n    color: \"secondary\",\n    fullWidth: true,\n    onClick: handleNext\n  }, \"N\\xE3o\"), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.selectFormControl\n  }, __jsx(InputLabel, {\n    htmlFor: \"frequenciaTreino\",\n    className: classes.selectLabel\n  }, \"Se sim, quantas vezes na semana?\"), __jsx(Select, {\n    MenuProps: {\n      className: classes.selectMenu\n    },\n    classes: {\n      select: classes.select\n    } // value={simpleSelect}\n    // onChange={handleSimple}\n    ,\n    inputProps: {\n      name: \"frequenciaTreino\",\n      inputRef: register,\n      id: \"frequenciaTreino\"\n    }\n  }, __jsx(MenuItem, {\n    classes: {\n      root: classes.selectMenuItem,\n      selected: classes.selectMenuItemSelected\n    },\n    value: \"2\"\n  }, \"1 a 2 vezes\"), __jsx(MenuItem, {\n    classes: {\n      root: classes.selectMenuItem,\n      selected: classes.selectMenuItemSelected\n    },\n    value: \"3\"\n  }, \"3 a 4 vezes\"), __jsx(MenuItem, {\n    classes: {\n      root: classes.selectMenuItem,\n      selected: classes.selectMenuItemSelected\n    },\n    value: \"4\"\n  }, \"6 a 7 vezes\"))))))), __jsx(Grow, _extends({\n    in: activeForm === 4,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 4 ? \"block\" : \"none\"\n    }\n  }, activeForm === 4 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Na academia, costuma fazer muscula\\xE7\\xE3o?\",\n    labelError: errors.fazMusculacao && errors.fazMusculacao.message,\n    error: errors.fazMusculacao ? true : false,\n    id: \"fazMusculacao\",\n    className: classes.topZero,\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"fazMusculacao\",\n      inputRef: register\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Na academia, costuma fazer aulas?\",\n    labelError: errors.fazAulas && errors.fazAulas.message,\n    error: errors.fazAulas ? true : false,\n    id: \"fazAulas\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"fazAulas\",\n      inputRef: register\n    }\n  }))))), __jsx(Grow, _extends({\n    in: activeForm === 5,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 5 ? \"block\" : \"none\"\n    }\n  }, activeForm === 5 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Atualmente, se considera sedent\\xE1rio?\",\n    labelError: errors.sedentario && errors.sedentario.message,\n    error: errors.sedentario ? true : false,\n    id: \"sedentario\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"sedentario\",\n      inputRef: register\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Se sim, h\\xE1 quanto tempo?\",\n    labelError: errors.fazAulas && errors.fazAulas.message,\n    error: errors.fazAulas ? true : false,\n    id: \"fazAulas\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"fazAulas\",\n      inputRef: register\n    }\n  }))))), __jsx(Grow, _extends({\n    in: activeForm === 6,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 6 ? \"block\" : \"none\"\n    }\n  }, activeForm === 6 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Pretende treinar quanto tempo por dia?\",\n    labelError: errors.tempoPorDia && errors.tempoPorDia.message,\n    error: errors.tempoPorDia ? true : false,\n    id: \"tempoPorDia\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"tempoPorDia\",\n      inputRef: register\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Em qual per\\xEDodo?\",\n    labelError: errors.periodo && errors.periodo.message,\n    error: errors.periodo ? true : false,\n    id: \"periodo\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"periodo\",\n      inputRef: register\n    }\n  }))))), __jsx(Grow, _extends({\n    in: activeForm === 7,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 7 ? \"block\" : \"none\"\n    }\n  }, activeForm === 7 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Possui algum patologia?\",\n    labelError: errors.patologia && errors.patologia.message,\n    error: errors.patologia ? true : false,\n    id: \"patologia\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"patologia\",\n      inputRef: register\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Se outra, qual?\",\n    labelError: errors.outroPatologia && errors.outroPatologia.message,\n    error: errors.outroPatologia ? true : false,\n    id: \"outroPatologia\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"outroPatologia\",\n      inputRef: register\n    }\n  }))))), __jsx(Grow, _extends({\n    in: activeForm === 8,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 8 ? \"block\" : \"none\"\n    }\n  }, activeForm === 8 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Possui algum problema \\xF3sseo articular?\",\n    labelError: errors.osseoArticular && errors.osseoArticular.message,\n    error: errors.osseoArticular ? true : false,\n    id: \"osseoArticular\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"osseoArticular\",\n      inputRef: register\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Se sim, qual?\",\n    labelError: errors.qualOsseoArticular && errors.qualOsseoArticular.message,\n    error: errors.qualOsseoArticular ? true : false,\n    id: \"qualOsseoArticular\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"qualOsseoArticular\",\n      inputRef: register\n    }\n  }))))), __jsx(Grow, _extends({\n    in: activeForm === 9,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 9 ? \"block\" : \"none\"\n    }\n  }, activeForm === 9 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"J\\xE1 sofreu alguma cirurgia?\",\n    labelError: errors.cirurgia && errors.cirurgia.message,\n    error: errors.cirurgia ? true : false,\n    id: \"cirurgia\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"cirurgia\",\n      inputRef: register\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Se sim, qual?\",\n    labelError: errors.qualCirurgia && errors.qualCirurgia.message,\n    error: errors.qualCirurgia ? true : false,\n    id: \"qualCirurgia\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"qualCirurgia\",\n      inputRef: register\n    }\n  }))))), __jsx(Grow, _extends({\n    in: activeForm === 10,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 10 ? \"block\" : \"none\"\n    }\n  }, activeForm === 10 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Sofreu alguma interna\\xE7\\xE3o recentemente?\",\n    labelError: errors.internacao && errors.internacao.message,\n    error: errors.internacao ? true : false,\n    id: \"internacao\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"internacao\",\n      inputRef: register\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Se sim, qual?\",\n    labelError: errors.qualInternacao && errors.qualInternacao.message,\n    error: errors.qualInternacao ? true : false,\n    id: \"qualInternacao\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"qualInternacao\",\n      inputRef: register\n    }\n  }))))), __jsx(Grow, _extends({\n    in: activeForm === 11,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 11 ? \"block\" : \"none\"\n    }\n  }, activeForm === 11 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Sofreu alguma interna\\xE7\\xE3o recentemente?\",\n    labelError: errors.medicamento && errors.medicamento.message,\n    error: errors.medicamento ? true : false,\n    id: \"medicamento\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"medicamento\",\n      inputRef: register\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Se sim, qual?\",\n    labelError: errors.qualMedicamento && errors.qualMedicamento.message,\n    error: errors.qualMedicamento ? true : false,\n    id: \"qualMedicamento\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"qualMedicamento\",\n      inputRef: register\n    }\n  }))))), __jsx(Grow, _extends({\n    in: activeForm === 12,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 12 ? \"block\" : \"none\"\n    }\n  }, activeForm === 12 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Possui o h\\xE1bito de fumar?\",\n    labelError: errors.fuma && errors.fuma.message,\n    error: errors.fuma ? true : false,\n    id: \"fuma\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"fuma\",\n      inputRef: register\n    }\n  }))))), __jsx(Grow, _extends({\n    in: activeForm === 13,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 13 ? \"block\" : \"none\"\n    }\n  }, activeForm === 13 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Faz acompnhamento com um(a) nutricionista?\",\n    labelError: errors.nutricionista && errors.nutricionista.message,\n    error: errors.nutricionista ? true : false,\n    id: \"nutricionista\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"nutricionista\",\n      inputRef: register\n    }\n  }))))), __jsx(Grow, _extends({\n    in: activeForm === 14,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 14 ? \"block\" : \"none\"\n    }\n  }, activeForm === 14 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Faz acompnhamento com um(a) personal trainer?\",\n    labelError: errors.personalTrainer && errors.personalTrainer.message,\n    error: errors.personalTrainer ? true : false,\n    id: \"personalTrainer\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"personalTrainer\",\n      inputRef: register\n    }\n  }))))), __jsx(Grow, _extends({\n    in: activeForm === 15,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 15 ? \"block\" : \"none\"\n    }\n  }, activeForm === 15 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Possui algum equipamento de treino? Se sim, informe-os por aqui\",\n    labelError: errors.equipamentos && errors.equipamentos.message,\n    error: errors.equipamentos ? true : false,\n    id: \"equipamentos\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"equipamentos\",\n      inputRef: register\n    }\n  }))))), __jsx(CardFooter, null, __jsx(GridContainer, {\n    justify: \"center\",\n    style: {\n      margin: \"0\",\n      width: \"100%\"\n    }\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12\n  }, __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: handleNext\n  }, \"Pr\\xF3ximo\")), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12\n  }, __jsx(Button, {\n    simple: true,\n    color: \"primary\",\n    fullWidth: true,\n    onClick: handleBack\n  }, \"Voltar\"))))))))))));\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport Link from \"next/link\"; // nodejs library that concatenates classes\n\nimport classNames from \"classnames\"; // nodejs library to set properties for components\n\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Drawer from \"@material-ui/core/Drawer\"; // @material-ui/icons\n\nimport Menu from \"@material-ui/icons/Menu\";\nimport Close from \"@material-ui/icons/Close\"; // core components\n\nimport styles from \"assets/jss/nextjs-material-kit-pro/components/headerStyle.js\";\nimport logo from \"assets/img/logo.png\";\nconst useStyles = makeStyles(styles);\nexport default function Header(props) {\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n  const classes = useStyles();\n  React.useEffect(() => {\n    if (props.changeColorOnScroll) {\n      window.addEventListener(\"scroll\", headerColorChange);\n    }\n\n    return function cleanup() {\n      if (props.changeColorOnScroll) {\n        window.removeEventListener(\"scroll\", headerColorChange);\n      }\n    };\n  });\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const headerColorChange = () => {\n    const {\n      color,\n      changeColorOnScroll\n    } = props;\n    const windowsScrollTop = window.pageYOffset;\n\n    if (windowsScrollTop > changeColorOnScroll.height) {\n      document.body.getElementsByTagName(\"header\")[0].classList.remove(classes[color]);\n      document.body.getElementsByTagName(\"header\")[0].classList.add(classes[changeColorOnScroll.color]);\n    } else {\n      document.body.getElementsByTagName(\"header\")[0].classList.add(classes[color]);\n      document.body.getElementsByTagName(\"header\")[0].classList.remove(classes[changeColorOnScroll.color]);\n    }\n  };\n\n  const {\n    color,\n    links,\n    brand,\n    fixed,\n    absolute,\n    imgBrand\n  } = props;\n  const appBarClasses = classNames({\n    [classes.appBar]: true,\n    [classes[color]]: color,\n    [classes.absolute]: absolute,\n    [classes.fixed]: fixed\n  });\n  return __jsx(AppBar, {\n    className: appBarClasses\n  }, __jsx(Toolbar, {\n    className: classes.container\n  }, __jsx(Button, {\n    className: classes.title\n  }, __jsx(Link, {\n    href: \"/historico-do-aluno\"\n  }, __jsx(\"a\", null, brand ? brand : \"\", __jsx(\"div\", {\n    className: classes.imgContainer\n  }, __jsx(\"img\", {\n    src: imgBrand !== undefined ? imgBrand : logo,\n    alt: \"...\",\n    className: classes.img\n  })))))), __jsx(Hidden, {\n    mdUp: true,\n    implementation: \"js\"\n  }, __jsx(Drawer, {\n    variant: \"temporary\",\n    anchor: \"right\",\n    open: mobileOpen,\n    classes: {\n      paper: classes.drawerPaper\n    },\n    onClose: handleDrawerToggle\n  }, __jsx(IconButton, {\n    color: \"inherit\",\n    \"aria-label\": \"open drawer\",\n    onClick: handleDrawerToggle,\n    className: classes.closeButtonDrawer\n  }, __jsx(Close, null)), __jsx(\"div\", {\n    className: classes.appResponsive\n  }, links))));\n}\nHeader.defaultProp = {\n  color: \"white\"\n};","map":null,"metadata":{},"sourceType":"module"}
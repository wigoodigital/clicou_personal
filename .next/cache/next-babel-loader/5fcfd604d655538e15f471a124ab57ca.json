{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from \"react\"; // nodejs library that concatenates classes\n\nimport classNames from \"classnames\"; // nodejs library to set properties for components\n\nimport SwipeableViews from \"react-swipeable-views\";\nimport { Element, scroller, animateScroll } from 'react-scroll';\nimport useMediaQuery from '@material-ui/core/useMediaQuery'; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\"; // core components\n\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport styles from \"assets/jss/nextjs-material-kit-pro/components/navPillsStyle.js\";\nvar useStyles = makeStyles(styles);\nexport default function NavPills(props) {\n  var _classNames;\n\n  var _React$useState = React.useState(props.active),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      active = _React$useState2[0],\n      setActive = _React$useState2[1];\n\n  var matches = useMediaQuery('(max-width:747px)');\n\n  var handleChange = function handleChange(event, active) {\n    // setActive(active);\n    props.setActive(active);\n  };\n\n  var handleChangeIndex = function handleChangeIndex(index) {\n    // setActive(index);\n    props.setActive(index);\n  };\n\n  React.useEffect(function () {\n    // window.scrollTo(0, 0); \n    // if(matches){\n    //   scroller.scrollTo('scroll-to-element', {\n    //     duration: 800,\n    //     delay: 0,\n    //     smooth: 'easeInOutQuart'\n    //   }) \n    // } else {\n    //   animateScroll.scrollToTop();\n    // }  \n    if (props.active == 15) {\n      animateScroll.scrollToTop();\n      setActive(0); // setActive(11);\n    } else {\n      scroller.scrollTo('scroll-to-element', {\n        duration: 800,\n        delay: 0,\n        smooth: 'easeInOutQuart'\n      });\n      setActive(props.active);\n    }\n  }, [props.active]);\n  React.useEffect(function () {\n    animateScroll.scrollToTop();\n  }, []);\n  var tabs = props.tabs,\n      direction = props.direction,\n      color = props.color,\n      horizontal = props.horizontal,\n      alignCenter = props.alignCenter;\n  var classes = useStyles();\n  var flexContainerClasses = classNames((_classNames = {}, _defineProperty(_classNames, classes.flexContainer, true), _defineProperty(_classNames, classes.horizontalDisplay, horizontal !== undefined), _classNames));\n\n  var tabButtons = __jsx(Tabs, {\n    classes: {\n      root: classes.root,\n      fixed: classes.fixed,\n      flexContainer: flexContainerClasses,\n      indicator: classes.displayNone\n    },\n    value: active,\n    onChange: handleChange,\n    centered: alignCenter\n  }, tabs.map(function (prop, key) {\n    var _classNames2;\n\n    var icon = {};\n\n    if (prop.tabIcon !== undefined) {\n      icon[\"icon\"] = __jsx(prop.tabIcon, {\n        className: classes.tabIcon\n      });\n    }\n\n    var pillsClasses = classNames((_classNames2 = {}, _defineProperty(_classNames2, classes.pills, true), _defineProperty(_classNames2, classes.horizontalPills, horizontal !== undefined), _defineProperty(_classNames2, classes.pillsWithIcons, prop.tabIcon !== undefined), _classNames2));\n    return __jsx(Tab, _extends({\n      label: prop.tabButton,\n      key: key\n    }, icon, {\n      classes: {\n        root: pillsClasses,\n        label: classes.label,\n        selected: classes[color]\n      },\n      style: prop.tabHidden ? {\n        display: \"none\"\n      } : null\n    }));\n  }));\n\n  var tabContent = __jsx(\"div\", {\n    className: classes.contentWrapper\n  }, __jsx(SwipeableViews, {\n    axis: direction === \"rtl\" ? \"x-reverse\" : \"x\",\n    disabled: true // animateTransitions={false}\n    ,\n    index: active,\n    onChangeIndex: handleChangeIndex\n  }, tabs.map(function (prop, key) {\n    return __jsx(\"div\", {\n      className: classes.tabContent,\n      key: key\n    }, prop.tabContent);\n  })));\n\n  return horizontal !== undefined ? __jsx(GridContainer, null, __jsx(GridItem, horizontal.tabsGrid, tabButtons), __jsx(GridItem, horizontal.contentGrid, __jsx(Element, {\n    name: \"scroll-to-element\",\n    id: \"scroll-to-element\"\n  }, tabContent))) : __jsx(\"div\", null, tabButtons, tabContent);\n}\nNavPills.defaultProps = {\n  active: 0,\n  color: \"primary\"\n};","map":null,"metadata":{},"sourceType":"module"}
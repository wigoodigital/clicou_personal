{"ast":null,"code":"var _jsxFileName = \"/Users/gabrieldossantos/Google Drive (webmaster@wigoo.com.br)/Wigoo Desenvolvimento/justfit.com.br/clicoupersonal.com.br/checkout/pages-sections/checkout/SectionContacts.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\"; // react components used to create a google map\n\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"; // @material-ui/icons\n\nimport PinDrop from \"@material-ui/icons/PinDrop\";\nimport Phone from \"@material-ui/icons/Phone\";\nimport Check from \"@material-ui/icons/Check\"; // core components\n\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport InfoArea from \"components/InfoArea/InfoArea.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport CardFooter from \"components/Card/CardFooter.js\";\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from '@hookform/resolvers';\nimport * as yup from \"yup\";\nimport { setLocale } from 'yup';\nimport contactsStyle from \"assets/jss/nextjs-material-kit-pro/pages/sectionsSections/contactsStyle.js\";\nimport city from \"assets/img/examples/city.jpg\";\nconst useStyles = makeStyles(contactsStyle);\nsetLocale({\n  mixed: {\n    notType: function notType(_ref) {\n      switch (_ref.type) {\n        case 'number':\n          return 'deve ser um número';\n\n        case 'string':\n          return 'deve ser um texto';\n\n        default:\n          return 'formato errado';\n      }\n    },\n    default: 'é inválido',\n    required: 'é um campo obrigatório',\n    oneOf: 'deve ser um dos seguintes valores: ${values}',\n    notOneOf: 'não pode ser um dos seguintes valores: ${values}'\n  },\n  string: {\n    length: 'deve ter exatamente ${length} caracteres',\n    min: 'deve ter pelo menos ${min} caracteres',\n    max: 'deve ter no máximo ${max} caracteres',\n    email: 'tem o formato de e-mail inválido',\n    url: 'deve ter um formato de URL válida',\n    trim: 'não deve conter espaços no início ou no fim.',\n    lowercase: 'deve estar em maiúsculo',\n    uppercase: 'deve estar em minúsculo'\n  },\n  number: {\n    min: 'deve ser no mínimo ${min}',\n    max: 'deve ser no máximo ${max}',\n    lessThan: 'deve ser menor que ${less}',\n    moreThan: 'deve ser maior que ${more}',\n    notEqual: 'não pode ser igual à ${notEqual}',\n    positive: 'deve ser um número posítivo',\n    negative: 'deve ser um número negativo',\n    integer: 'deve ser um número inteiro'\n  },\n  date: {\n    min: 'deve ser maior que a data ${min}',\n    max: 'deve ser menor que a data ${max}'\n  },\n  array: {\n    min: 'deve ter no mínimo ${min} itens',\n    max: 'deve ter no máximo ${max} itens'\n  }\n});\nconst SignupSchema = yup.object().shape({\n  // firstName: yup.string().required(),\n  first: yup.string().required(),\n  email: yup.string().required(),\n  last: yup.number().required().positive().integer(),\n  message: yup.string().url(),\n  checkboxInput: yup.boolean().oneOf([true], 'aceite obrigatório')\n}); // const schema = yup.object().shape({\n//   first: yup.string().required(),\n//   age: yup.number().positive().integer().required(),\n// });\n\nexport default function SectionContacts(_ref2) {\n  let rest = Object.assign({}, _ref2);\n  // const { register, errors, handleSubmit} = useForm({\n  //   validationSchema: SignupSchema\n  // });\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    resolver: yupResolver(SignupSchema)\n  });\n\n  const onSubmit = data => {\n    console.log(data); // alert(JSON.stringify(data, null));\n  };\n\n  const [checked, setChecked] = React.useState([]);\n\n  const handleToggle = value => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const classes = useStyles();\n  return __jsx(\"div\", _extends({\n    className: \"cd-section\"\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    className: classes.contacts + \" \" + classes.section // style={{ backgroundImage: `url(${city})` }}\n    // style={{ backgroundImage: `url(${city})` }}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, __jsx(GridContainer, {\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, __jsx(Card, {\n    className: classes.card1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 15\n    }\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, __jsx(CardHeader, {\n    contact: true,\n    color: \"primary\",\n    className: classes.textCenter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 19\n    }\n  }, __jsx(\"h4\", {\n    className: classes.cardTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }\n  }, \"Identifica\\xE7\\xE3o\")), __jsx(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 19\n    }\n  }, __jsx(GridContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 21\n    }\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 6,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 23\n    }\n  }, __jsx(CustomInput, {\n    labelText: \"First Name\",\n    labelError: errors.first && errors.first.message,\n    id: \"first\",\n    error: errors.first ? true : false,\n    formControlProps: {\n      fullWidth: true\n    },\n    helperText: \"Incorrect entry.\",\n    inputProps: {\n      name: \"first\",\n      inputRef: register\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 25\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 6,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 23\n    }\n  }, __jsx(CustomInput, {\n    labelText: \"Last Name\",\n    labelError: errors.last && errors.last.message,\n    error: errors.last ? true : false,\n    id: \"last\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"last\",\n      inputRef: register\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 25\n    }\n  }))), __jsx(CustomInput, {\n    labelText: \"Email Address\",\n    labelError: errors.email && errors.email.message,\n    error: errors.email ? true : false,\n    id: \"email\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"email\",\n      inputRef: register\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 21\n    }\n  }), __jsx(CustomInput, {\n    labelText: \"Your Message\",\n    labelError: errors.message && errors.message.message,\n    error: errors.message ? true : false,\n    id: \"message\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      multiline: true,\n      rows: 5,\n      name: \"message\",\n      inputRef: register\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 21\n    }\n  })), __jsx(CardFooter, {\n    className: classes.justifyContentBetween,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 19\n    }\n  }, __jsx(FormControl, {\n    required: true,\n    error: errors.checkboxInput,\n    component: \"fieldset\",\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 21\n    }\n  }, __jsx(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 23\n    }\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      tabIndex: -1,\n      onClick: () => handleToggle(1),\n      checkedIcon: __jsx(Check, {\n        className: classes.checkedIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 33\n        }\n      }),\n      icon: __jsx(Check, {\n        className: classes.uncheckedIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 37\n        }\n      }),\n      classes: {\n        checked: classes.checked,\n        root: classes.checkRoot\n      },\n      name: \"checkboxInput\",\n      inputRef: register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 29\n      }\n    }),\n    classes: {\n      label: classes.label\n    },\n    label: \"I'm not a robot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 25\n    }\n  })), __jsx(FormHelperText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 23\n    }\n  }, errors.checkboxInput ? errors.checkboxInput.message : \"\")), __jsx(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    className: classes.pullRight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 21\n    }\n  }, \"Send Message\")))))))));\n}","map":{"version":3,"sources":["/Users/gabrieldossantos/Google Drive (webmaster@wigoo.com.br)/Wigoo Desenvolvimento/justfit.com.br/clicoupersonal.com.br/checkout/pages-sections/checkout/SectionContacts.js"],"names":["React","withScriptjs","withGoogleMap","GoogleMap","Marker","makeStyles","Checkbox","FormControlLabel","PinDrop","Phone","Check","GridContainer","GridItem","InfoArea","Card","CardHeader","CardBody","CardFooter","CustomInput","Button","FormHelperText","FormControl","FormGroup","useForm","yupResolver","yup","setLocale","contactsStyle","city","useStyles","mixed","notType","_ref","type","default","required","oneOf","notOneOf","string","length","min","max","email","url","trim","lowercase","uppercase","number","lessThan","moreThan","notEqual","positive","negative","integer","date","array","SignupSchema","object","shape","first","last","message","checkboxInput","boolean","SectionContacts","rest","register","handleSubmit","errors","resolver","onSubmit","data","console","log","checked","setChecked","useState","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","classes","contacts","section","container","card1","textCenter","cardTitle","fullWidth","name","inputRef","multiline","rows","justifyContentBetween","formControl","checkedIcon","uncheckedIcon","root","checkRoot","label","pullRight"],"mappings":"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","sourcesContent":["import React from \"react\";\n// react components used to create a google map\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker\n} from \"react-google-maps\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\n// @material-ui/icons\nimport PinDrop from \"@material-ui/icons/PinDrop\";\nimport Phone from \"@material-ui/icons/Phone\";\nimport Check from \"@material-ui/icons/Check\";\n// core components\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport InfoArea from \"components/InfoArea/InfoArea.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport CardFooter from \"components/Card/CardFooter.js\";\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\n\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from '@hookform/resolvers';\nimport * as yup from \"yup\";\nimport { setLocale } from 'yup';\n\nimport contactsStyle from \"assets/jss/nextjs-material-kit-pro/pages/sectionsSections/contactsStyle.js\";\n\nimport city from \"assets/img/examples/city.jpg\";\n\nconst useStyles = makeStyles(contactsStyle);\n\n\nsetLocale({  \n  mixed: {\n    notType: function notType(_ref) {\n      switch (_ref.type) {\n        case 'number':\n          return 'deve ser um número';\n        case 'string':\n          return 'deve ser um texto';\n        default:\n          return 'formato errado';\n      }\n    },\n    default: 'é inválido',\n    required: 'é um campo obrigatório',\n    oneOf: 'deve ser um dos seguintes valores: ${values}',\n    notOneOf: 'não pode ser um dos seguintes valores: ${values}',\n  },\n  string: {\n      length: 'deve ter exatamente ${length} caracteres',\n      min: 'deve ter pelo menos ${min} caracteres',\n      max: 'deve ter no máximo ${max} caracteres',\n      email: 'tem o formato de e-mail inválido',\n      url: 'deve ter um formato de URL válida',\n      trim: 'não deve conter espaços no início ou no fim.',\n      lowercase: 'deve estar em maiúsculo',\n      uppercase: 'deve estar em minúsculo',\n  },\n  number: {\n      min: 'deve ser no mínimo ${min}',\n      max: 'deve ser no máximo ${max}',\n      lessThan: 'deve ser menor que ${less}',\n      moreThan: 'deve ser maior que ${more}',\n      notEqual: 'não pode ser igual à ${notEqual}',\n      positive: 'deve ser um número posítivo',\n      negative: 'deve ser um número negativo',\n      integer: 'deve ser um número inteiro',      \n  },\n      date: {\n      min: 'deve ser maior que a data ${min}',\n      max: 'deve ser menor que a data ${max}',\n  },\n      array: {\n      min: 'deve ter no mínimo ${min} itens',\n      max: 'deve ter no máximo ${max} itens',\n  }\n});\n\nconst SignupSchema = yup.object().shape({\n  // firstName: yup.string().required(),\n  first: yup.string().required(),\n  email: yup.string().required(),\n  last: yup\n    .number()\n    .required()\n    .positive()\n    .integer(),    \n  message: yup.string().url(),\n  checkboxInput: yup.boolean().oneOf([true],'aceite obrigatório')\n});\n\n// const schema = yup.object().shape({\n//   first: yup.string().required(),\n//   age: yup.number().positive().integer().required(),\n// });\n\nexport default function SectionContacts({ ...rest }) {\n  // const { register, errors, handleSubmit} = useForm({\n  //   validationSchema: SignupSchema\n  // });\n  const { register, handleSubmit, errors } = useForm({\n    resolver: yupResolver(SignupSchema)\n  });\n  const onSubmit = data => {\n    console.log(data);\n    // alert(JSON.stringify(data, null));\n  };\n\n\n\n  const [checked, setChecked] = React.useState([]);\n  const handleToggle = value => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n    setChecked(newChecked);\n  };\n\n  const classes = useStyles();\n  return (\n    <div className=\"cd-section\" {...rest}>\n      {/* Contact us 1 START */}\n      <div\n        className={classes.contacts + \" \" + classes.section}\n        // style={{ backgroundImage: `url(${city})` }}\n        // style={{ backgroundImage: `url(${city})` }}\n      >\n        <div className={classes.container}>\n          <GridContainer justify=\"center\">\n            {/* <GridItem xs={12} sm={12} md={8} className={classes.mlAuto}> */}\n            <GridItem xs={12} sm={12} md={5}>\n              <Card className={classes.card1}>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                  <CardHeader\n                    contact\n                    color=\"primary\"\n                    className={classes.textCenter}\n                  >\n                    <h4 className={classes.cardTitle}>Identificação</h4>\n                  </CardHeader>\n                  <CardBody>\n                    <GridContainer>\n                      <GridItem xs={12} sm={6} md={6}>\n                        <CustomInput\n                          labelText=\"First Name\"\n                          labelError={errors.first && errors.first.message}\n                          id=\"first\"  \n                          error={errors.first ? true : false}                                                                          \n                          formControlProps={{\n                            fullWidth: true\n                          }}\n                          helperText=\"Incorrect entry.\"\n                          inputProps={{\n                            name: \"first\",                            \n                            inputRef: register\n                          }}                          \n                        />\n                        {/* <FormHelperText error>Error</FormHelperText> */}\n                      </GridItem>\n                      <GridItem xs={12} sm={6} md={6}>\n                        <CustomInput\n                          labelText=\"Last Name\"\n                          labelError={errors.last && errors.last.message}                          \n                          error={errors.last ? true : false}\n                          id=\"last\"\n                          formControlProps={{\n                            fullWidth: true\n                          }}\n                          inputProps={{\n                            name: \"last\",\n                            inputRef: register                            \n                          }}\n                        />\n                      </GridItem>\n                    </GridContainer>\n\n                 \n                    <CustomInput                      \n                      labelText=\"Email Address\"\n                      labelError={errors.email && errors.email.message}\n                      error={errors.email ? true : false}\n                      id=\"email\"\n                      formControlProps={{\n                        fullWidth: true\n                      }}\n                      inputProps={{\n                        name: \"email\",\n                        inputRef: register                            \n                      }}\n                    />\n                    <CustomInput\n                      labelText=\"Your Message\"\n                      labelError={errors.message && errors.message.message}\n                      error={errors.message ? true : false}                      \n                      id=\"message\"\n                      formControlProps={{\n                        fullWidth: true\n                      }}\n                      inputProps={{\n                        multiline: true,\n                        rows: 5,\n                        name: \"message\",\n                        inputRef: register   \n                      }}\n                    />\n                  </CardBody>\n                  <CardFooter className={classes.justifyContentBetween}>    \n                    <FormControl required error={errors.checkboxInput} component=\"fieldset\" className={classes.formControl}>                      \n                      <FormGroup>\n\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              tabIndex={-1}\n                              onClick={() => handleToggle(1)}\n                              checkedIcon={\n                                <Check className={classes.checkedIcon} />\n                              }\n                              icon={<Check className={classes.uncheckedIcon} />}\n                              classes={{\n                                checked: classes.checked,\n                                root: classes.checkRoot\n                              }}\n                              name=\"checkboxInput\"\n                              inputRef={ register }                          \n                            />\n                          }                      \n                          classes={{ label: classes.label }}\n                          label=\"I'm not a robot\"\n                        />  \n                      </FormGroup>\n                      <FormHelperText>{errors.checkboxInput ? errors.checkboxInput.message : \"\"}</FormHelperText>\n                    </FormControl>                 \n                    <Button type=\"submit\" color=\"primary\" className={classes.pullRight}>\n                      Send Message\n                    </Button>\n                  </CardFooter>\n                </form>\n              </Card>\n            </GridItem>\n          </GridContainer>\n        </div>\n      </div>\n      {/* Contact us 1 END */}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\"; // react components used to create a google map\n\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"; // @material-ui/icons\n\nimport PinDrop from \"@material-ui/icons/PinDrop\";\nimport Phone from \"@material-ui/icons/Phone\";\nimport Check from \"@material-ui/icons/Check\"; // core components\n\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport InfoArea from \"components/InfoArea/InfoArea.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport CardFooter from \"components/Card/CardFooter.js\";\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from '@hookform/resolvers';\nimport * as yup from \"yup\";\nimport { setLocale } from 'yup';\nimport contactsStyle from \"assets/jss/nextjs-material-kit-pro/pages/sectionsSections/contactsStyle.js\";\nimport city from \"assets/img/examples/city.jpg\";\nconst useStyles = makeStyles(contactsStyle);\nsetLocale({\n  mixed: {\n    notType: function notType(_ref) {\n      switch (_ref.type) {\n        case 'number':\n          return 'deve ser um número';\n\n        case 'string':\n          return 'deve ser um texto';\n\n        default:\n          return 'formato errado';\n      }\n    },\n    default: 'é inválido',\n    required: 'é um campo obrigatório',\n    oneOf: 'deve ser um dos seguintes valores: ${values}',\n    notOneOf: 'não pode ser um dos seguintes valores: ${values}'\n  },\n  string: {\n    length: 'deve ter exatamente ${length} caracteres',\n    min: 'deve ter pelo menos ${min} caracteres',\n    max: 'deve ter no máximo ${max} caracteres',\n    email: 'tem o formato de e-mail inválido',\n    url: 'deve ter um formato de URL válida',\n    trim: 'não deve conter espaços no início ou no fim.',\n    lowercase: 'deve estar em maiúsculo',\n    uppercase: 'deve estar em minúsculo'\n  },\n  number: {\n    min: 'deve ser no mínimo ${min}',\n    max: 'deve ser no máximo ${max}',\n    lessThan: 'deve ser menor que ${less}',\n    moreThan: 'deve ser maior que ${more}',\n    notEqual: 'não pode ser igual à ${notEqual}',\n    positive: 'deve ser um número posítivo',\n    negative: 'deve ser um número negativo',\n    integer: 'deve ser um número inteiro'\n  },\n  date: {\n    min: 'deve ser maior que a data ${min}',\n    max: 'deve ser menor que a data ${max}'\n  },\n  array: {\n    min: 'deve ter no mínimo ${min} itens',\n    max: 'deve ter no máximo ${max} itens'\n  }\n});\nconst SignupSchema = yup.object().shape({\n  // firstName: yup.string().required(),\n  first: yup.string().required(),\n  email: yup.string().required(),\n  last: yup.number().required().positive().integer(),\n  message: yup.string().url(),\n  checkboxInput: yup.boolean().oneOf([true], 'aceite obrigatório')\n}); // const schema = yup.object().shape({\n//   first: yup.string().required(),\n//   age: yup.number().positive().integer().required(),\n// });\n\nexport default function SectionContacts(_ref2) {\n  let rest = Object.assign({}, _ref2);\n  // const { register, errors, handleSubmit} = useForm({\n  //   validationSchema: SignupSchema\n  // });\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    resolver: yupResolver(SignupSchema)\n  });\n\n  const onSubmit = data => {\n    console.log(data); // alert(JSON.stringify(data, null));\n  };\n\n  const [checked, setChecked] = React.useState([]);\n\n  const handleToggle = value => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const classes = useStyles();\n  return __jsx(\"div\", _extends({\n    className: \"cd-section\"\n  }, rest), __jsx(\"div\", {\n    className: classes.contacts + \" \" + classes.section // style={{ backgroundImage: `url(${city})` }}\n    // style={{ backgroundImage: `url(${city})` }}\n\n  }, __jsx(\"div\", {\n    className: classes.container\n  }, __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 5\n  }, __jsx(Card, {\n    className: classes.card1\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(CardHeader, {\n    contact: true,\n    color: \"primary\",\n    className: classes.textCenter\n  }, __jsx(\"h4\", {\n    className: classes.cardTitle\n  }, \"Identifica\\xE7\\xE3o\")), __jsx(CardBody, null, __jsx(GridContainer, null, __jsx(GridItem, {\n    xs: 12,\n    sm: 6,\n    md: 6\n  }, __jsx(CustomInput, {\n    labelText: \"First Name\",\n    labelError: errors.first && errors.first.message,\n    id: \"first\",\n    error: errors.first ? true : false,\n    formControlProps: {\n      fullWidth: true\n    },\n    helperText: \"Incorrect entry.\",\n    inputProps: {\n      name: \"first\",\n      inputRef: register\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 6,\n    md: 6\n  }, __jsx(CustomInput, {\n    labelText: \"Last Name\",\n    labelError: errors.last && errors.last.message,\n    error: errors.last ? true : false,\n    id: \"last\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"last\",\n      inputRef: register\n    }\n  }))), __jsx(CustomInput, {\n    labelText: \"Email Address\",\n    labelError: errors.email && errors.email.message,\n    error: errors.email ? true : false,\n    id: \"email\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"email\",\n      inputRef: register\n    }\n  }), __jsx(CustomInput, {\n    labelText: \"Your Message\",\n    labelError: errors.message && errors.message.message,\n    error: errors.message ? true : false,\n    id: \"message\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      multiline: true,\n      rows: 5,\n      name: \"message\",\n      inputRef: register\n    }\n  })), __jsx(CardFooter, {\n    className: classes.justifyContentBetween\n  }, __jsx(FormControl, {\n    required: true,\n    error: errors.checkboxInput,\n    component: \"fieldset\",\n    className: classes.formControl\n  }, __jsx(FormGroup, null, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      tabIndex: -1,\n      onClick: () => handleToggle(1),\n      checkedIcon: __jsx(Check, {\n        className: classes.checkedIcon\n      }),\n      icon: __jsx(Check, {\n        className: classes.uncheckedIcon\n      }),\n      classes: {\n        checked: classes.checked,\n        root: classes.checkRoot\n      },\n      name: \"checkboxInput\",\n      inputRef: register\n    }),\n    classes: {\n      label: classes.label\n    },\n    label: \"I'm not a robot\"\n  })), __jsx(FormHelperText, null, errors.checkboxInput ? errors.checkboxInput.message : \"\")), __jsx(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    className: classes.pullRight\n  }, \"Send Message\")))))))));\n}","map":null,"metadata":{},"sourceType":"module"}
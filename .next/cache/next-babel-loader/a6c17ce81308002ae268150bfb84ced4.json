{"ast":null,"code":"var _jsxFileName = \"/Users/gabrieldossantos/Google Drive (webmaster@wigoo.com.br)/Wigoo Desenvolvimento/justfit.com.br/clicoupersonal.com.br/checkout/components/CustomInput/CustomInput.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\"; // nodejs library to set properties for components\n\nimport PropTypes from \"prop-types\"; // nodejs library that concatenates classes\n\nimport classNames from \"classnames\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Input from \"@material-ui/core/Input\";\nimport FormHelperText from '@material-ui/core/FormHelperText'; // @material-ui/icons\n\nimport Clear from \"@material-ui/icons/Clear\";\nimport Check from \"@material-ui/icons/Check\"; // core components\n\nimport styles from \"assets/jss/nextjs-material-kit-pro/components/customInputStyle.js\";\nconst useStyles = makeStyles(styles);\nexport default function CustomInput(props) {\n  const {\n    formControlProps,\n    labelText,\n    labelError,\n    id,\n    labelProps,\n    inputProps,\n    error,\n    white,\n    inputRootCustomClasses,\n    success\n  } = props;\n  const classes = useStyles();\n  const labelClasses = classNames({\n    [\" \" + classes.labelRootError]: error,\n    [\" \" + classes.labelRootSuccess]: success && !error\n  });\n  const underlineClasses = classNames({\n    [classes.underlineError]: error,\n    [classes.underlineSuccess]: success && !error,\n    [classes.underline]: true,\n    [classes.whiteUnderline]: white\n  });\n  const marginTop = classNames({\n    [inputRootCustomClasses]: inputRootCustomClasses !== undefined\n  });\n  const inputClasses = classNames({\n    [classes.input]: true,\n    [classes.whiteInput]: white\n  });\n  var formControlClasses;\n\n  if (formControlProps !== undefined) {\n    formControlClasses = classNames(formControlProps.className, classes.formControl);\n  } else {\n    formControlClasses = classes.formControl;\n  }\n\n  return __jsx(\"div\", {\n    className: classes.containerInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, __jsx(FormControl, _extends({}, formControlProps, {\n    className: formControlClasses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), labelText !== undefined ? __jsx(InputLabel, _extends({\n    className: classes.labelRoot + \" \" + labelClasses,\n    htmlFor: id\n  }, labelProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }), labelText) : null, __jsx(Input, _extends({\n    classes: {\n      input: inputClasses,\n      root: marginTop,\n      disabled: classes.disabled,\n      underline: underlineClasses\n    },\n    id: id\n  }, inputProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  })), error ? __jsx(Clear, {\n    className: classes.feedback + \" \" + classes.labelRootError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }) : success ? __jsx(Check, {\n    className: classes.feedback + \" \" + classes.labelRootSuccess,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }) : null), error && __jsx(FormHelperText, {\n    error: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, labelError));\n}\nCustomInput.propTypes = {\n  labelText: PropTypes.node,\n  labelError: PropTypes.string,\n  labelProps: PropTypes.object,\n  id: PropTypes.string,\n  inputProps: PropTypes.object,\n  formControlProps: PropTypes.object,\n  inputRootCustomClasses: PropTypes.string,\n  error: PropTypes.bool,\n  success: PropTypes.bool,\n  white: PropTypes.bool\n};","map":{"version":3,"sources":["/Users/gabrieldossantos/Google Drive (webmaster@wigoo.com.br)/Wigoo Desenvolvimento/justfit.com.br/clicoupersonal.com.br/checkout/components/CustomInput/CustomInput.js"],"names":["React","PropTypes","classNames","makeStyles","FormControl","InputLabel","Input","FormHelperText","Clear","Check","styles","useStyles","CustomInput","props","formControlProps","labelText","labelError","id","labelProps","inputProps","error","white","inputRootCustomClasses","success","classes","labelClasses","labelRootError","labelRootSuccess","underlineClasses","underlineError","underlineSuccess","underline","whiteUnderline","marginTop","undefined","inputClasses","input","whiteInput","formControlClasses","className","formControl","containerInput","labelRoot","root","disabled","feedback","propTypes","node","string","object","bool"],"mappings":"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","sourcesContent":["import React from \"react\";\n// nodejs library to set properties for components\nimport PropTypes from \"prop-types\";\n// nodejs library that concatenates classes\nimport classNames from \"classnames\";\n\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Input from \"@material-ui/core/Input\";\nimport FormHelperText from '@material-ui/core/FormHelperText';\n// @material-ui/icons\nimport Clear from \"@material-ui/icons/Clear\";\nimport Check from \"@material-ui/icons/Check\";\n// core components\n\nimport styles from \"assets/jss/nextjs-material-kit-pro/components/customInputStyle.js\";\n\nconst useStyles = makeStyles(styles);\n\nexport default function CustomInput(props) {\n  const {\n    formControlProps,\n    labelText,\n    labelError,\n    id,\n    labelProps,\n    inputProps,\n    error,\n    white,\n    inputRootCustomClasses,\n    success\n  } = props;\n  const classes = useStyles();\n  const labelClasses = classNames({\n    [\" \" + classes.labelRootError]: error,\n    [\" \" + classes.labelRootSuccess]: success && !error\n  });\n  const underlineClasses = classNames({\n    [classes.underlineError]: error,\n    [classes.underlineSuccess]: success && !error,\n    [classes.underline]: true,\n    [classes.whiteUnderline]: white\n  });\n  const marginTop = classNames({\n    [inputRootCustomClasses]: inputRootCustomClasses !== undefined\n  });\n  const inputClasses = classNames({\n    [classes.input]: true,\n    [classes.whiteInput]: white\n  });\n  var formControlClasses;\n  if (formControlProps !== undefined) {\n    formControlClasses = classNames(\n      formControlProps.className,\n      classes.formControl\n    );\n  } else {\n    formControlClasses = classes.formControl;\n  }\n  return (\n    <div className={classes.containerInput}>\n      <FormControl {...formControlProps} className={formControlClasses}>\n        {labelText !== undefined ? (\n          <InputLabel\n            className={classes.labelRoot + \" \" + labelClasses}\n            htmlFor={id}\n            {...labelProps}\n          >\n            {labelText}\n          </InputLabel>\n        ) : null}\n        <Input\n          classes={{\n            input: inputClasses,\n            root: marginTop,\n            disabled: classes.disabled,\n            underline: underlineClasses\n          }}\n          id={id}\n          {...inputProps}\n        />\n        {error ? (        \n          <Clear className={classes.feedback + \" \" + classes.labelRootError} />        \n        ) : success ? (\n          <Check className={classes.feedback + \" \" + classes.labelRootSuccess} />\n        ) : null}\n        \n      </FormControl>\n      \n      { error && (\n        <FormHelperText error>{labelError}</FormHelperText>\n      )}\n    </div>\n  );\n}\n\nCustomInput.propTypes = {\n  labelText: PropTypes.node,\n  labelError: PropTypes.string,\n  labelProps: PropTypes.object,\n  id: PropTypes.string,\n  inputProps: PropTypes.object,\n  formControlProps: PropTypes.object,\n  inputRootCustomClasses: PropTypes.string,\n  error: PropTypes.bool,\n  success: PropTypes.bool,\n  white: PropTypes.bool\n};\n"]},"metadata":{},"sourceType":"module"}
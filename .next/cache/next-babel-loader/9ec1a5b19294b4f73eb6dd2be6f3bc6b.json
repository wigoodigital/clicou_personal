{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport axios from 'axios'; // react components used to create a google map\n\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\nimport TagManager from 'react-gtm-module'; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\"; // @material-ui/icons\n\nimport PinDrop from \"@material-ui/icons/PinDrop\";\nimport Phone from \"@material-ui/icons/Phone\";\nimport Check from \"@material-ui/icons/Check\";\nimport Email from \"@material-ui/icons/Email\";\nimport EventIcon from '@material-ui/icons/Event';\nimport Favorite from \"@material-ui/icons/Favorite\";\nimport AssignmentInd from \"@material-ui/icons/AssignmentInd\"; // core components\n\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport InfoArea from \"components/InfoArea/InfoArea.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport CardFooter from \"components/Card/CardFooter.js\";\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport SnackbarContent from \"components/Snackbar/SnackbarContent.js\";\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Grow from '@material-ui/core/Grow';\nimport InputMask from \"react-input-mask\";\nimport MaskedInput from 'react-text-mask';\nimport createNumberMask from 'text-mask-addons/dist/createNumberMask';\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from '@hookform/resolvers';\nimport * as yup from \"yup\";\nimport { setLocale } from 'yup';\nimport checkoutStyle from \"assets/jss/nextjs-material-kit-pro/pages/checkoutSections/checkoutStyle.js\";\nimport city from \"assets/img/examples/city.jpg\";\nconst useStyles = makeStyles(checkoutStyle);\n\nfunction TextMaskCustom(props) {\n  const {\n    inputRef\n  } = props,\n        other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return __jsx(MaskedInput, _extends({}, other, {\n    ref: ref => {\n      inputRef(ref ? ref.inputElement : null);\n    },\n    mask: [/[0-9]/, /[0-9]/, /[0-9]/, '.', /[0-9]/, /[0-9]/, /[0-9]/, '.', /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/] // placeholderChar={'\\u2000'}\n    ,\n    showMask: true\n  }));\n}\n\nfunction PhoneMask(props) {\n  const {\n    inputRef\n  } = props,\n        other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return __jsx(MaskedInput, _extends({}, other, {\n    ref: ref => {\n      inputRef(ref ? ref.inputElement : null);\n    },\n    mask: ['(', /[1-9]/, /[0-9]/, ')', ' ', /[1-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/] // placeholderChar={'\\u2000'}\n    ,\n    showMask: true\n  }));\n}\n\nfunction DateMask(props) {\n  const {\n    inputRef\n  } = props,\n        other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return __jsx(MaskedInput, _extends({}, other, {\n    ref: ref => {\n      inputRef(ref ? ref.inputElement : null);\n    } // mask={['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]}\n    ,\n    mask: [/\\d/, /\\d/, '/', /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/] // placeholderChar={'\\u2000'}\n    ,\n    showMask: true\n  }));\n}\n\nfunction AlturaMask(props) {\n  const {\n    inputRef\n  } = props,\n        other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return __jsx(MaskedInput, _extends({}, other, {\n    ref: ref => {\n      inputRef(ref ? ref.inputElement : null);\n    } // mask={['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]}\n    ,\n    mask: [/[0-9]/, ',', /[0-9]/, /[0-9]/] // guide={false}\n    ,\n    placeholderChar: '\\u2000',\n    showMask: true\n  }));\n}\n\nconst defaultMaskOptions = {\n  prefix: '',\n  suffix: '',\n  includeThousandsSeparator: true,\n  thousandsSeparatorSymbol: ',',\n  allowDecimal: true,\n  decimalSymbol: ',',\n  decimalLimit: 2,\n  // how many digits allowed after the decimal\n  integerLimit: 3,\n  // limit length of integer numbers\n  // requireDecimal: true,\n  allowNegative: false,\n  allowLeadingZeroes: true\n};\n\nconst PesoMask = props => {\n  const {\n    inputRef,\n    maskOptions\n  } = props,\n        other = _objectWithoutProperties(props, [\"inputRef\", \"maskOptions\"]);\n\n  const currencyMask = createNumberMask(_objectSpread({}, defaultMaskOptions, {}, maskOptions));\n  return __jsx(MaskedInput, _extends({}, other, {\n    ref: ref => {\n      inputRef(ref ? ref.inputElement : null);\n    },\n    mask: currencyMask,\n    guide: false,\n    placeholderChar: '\\u2000',\n    showMask: true\n  }));\n};\n\nPesoMask.defaultProps = {\n  inputMode: 'numeric',\n  maskOptions: {}\n};\n// const AlturaMask = (props) => {\n//   const { inputRef, maskOptions, ...other } = props;\n//   const currencyMask = createNumberMask({\n//     ...defaultMaskOptions,    \n//     ...maskOptions,\n//     integerLimit: 1, // limit length of integer numbers\n//   })\n//   return (\n//     <MaskedInput\n//       {...other}\n//       ref={(ref) => {\n//         inputRef(ref ? ref.inputElement : null);\n//       }}\n//       mask={currencyMask}\n//       guide={false}\n//       placeholderChar={'\\u2000'}\n//       showMask\n//     />\n//   );\n// }\n// AlturaMask.defaultProps = {\n//   inputMode: 'numeric',\n//   maskOptions: {},\n// }\n// AlturaMask.propTypes = {\n//   inputRef: PropTypes.func.isRequired,\n//   inputmode: PropTypes.string,\n//   maskOptions: PropTypes.shape({\n//     prefix: PropTypes.string,\n//     suffix: PropTypes.string,\n//     includeThousandsSeparator: PropTypes.boolean,\n//     thousandsSeparatorSymbol: PropTypes.string,\n//     allowDecimal: PropTypes.boolean,\n//     decimalSymbol: PropTypes.string,\n//     decimalLimit: PropTypes.string,\n//     requireDecimal: PropTypes.boolean,\n//     allowNegative: PropTypes.boolean,\n//     allowLeadingZeroes: PropTypes.boolean,\n//     integerLimit: PropTypes.number,\n//   }),\n// };\nsetLocale({\n  mixed: {\n    notType: function notType(_ref) {\n      switch (_ref.type) {\n        case 'number':\n          return 'deve ser um número';\n\n        case 'string':\n          return 'deve ser um texto';\n\n        default:\n          return 'formato errado';\n      }\n    },\n    default: 'é inválido',\n    required: 'Desculpe, este campo é obrigatório',\n    oneOf: 'deve ser um dos seguintes valores: ${values}',\n    notOneOf: 'não pode ser um dos seguintes valores: ${values}'\n  },\n  string: {\n    length: 'deve ter exatamente ${length} caracteres',\n    min: 'deve ter pelo menos ${min} caracteres',\n    max: 'deve ter no máximo ${max} caracteres',\n    email: 'Por favor, informe um e-mail inválido',\n    url: 'deve ter um formato de URL válida',\n    trim: 'não deve conter espaços no início ou no fim.',\n    lowercase: 'deve estar em maiúsculo',\n    uppercase: 'deve estar em minúsculo'\n  },\n  number: {\n    min: 'deve ser no mínimo ${min}',\n    max: 'deve ser no máximo ${max}',\n    lessThan: 'deve ser menor que ${less}',\n    moreThan: 'deve ser maior que ${more}',\n    notEqual: 'não pode ser igual à ${notEqual}',\n    positive: 'deve ser um número posítivo',\n    negative: 'deve ser um número negativo',\n    integer: 'deve ser um número inteiro'\n  },\n  date: {\n    min: 'deve ser maior que a data ${min}',\n    max: 'deve ser menor que a data ${max}'\n  },\n  array: {\n    min: 'deve ter no mínimo ${min} itens',\n    max: 'deve ter no máximo ${max} itens'\n  }\n});\nconst regexCPF = /([0-9]{2}[\\.]?[0-9]{3}[\\.]?[0-9]{3}[\\/]?[0-9]{4}[-]?[0-9]{2})|([0-9]{3}[\\.]?[0-9]{3}[\\.]?[0-9]{3}[-]?[0-9]{2})/gm;\n\nfunction cpfValidate(cpf) {\n  console.log(\"Validatring\", cpf);\n  return cpf.length > 10;\n}\n\nfunction isValidCPF(cpf) {\n  if (typeof cpf !== \"string\") return false;\n  cpf = cpf.replace(/[\\s.-]*/igm, '');\n\n  if (!cpf || cpf.length != 11 || cpf == \"00000000000\" || cpf == \"11111111111\" || cpf == \"22222222222\" || cpf == \"33333333333\" || cpf == \"44444444444\" || cpf == \"55555555555\" || cpf == \"66666666666\" || cpf == \"77777777777\" || cpf == \"88888888888\" || cpf == \"99999999999\") {\n    return false;\n  }\n\n  var soma = 0;\n  var resto;\n\n  for (var i = 1; i <= 9; i++) soma = soma + parseInt(cpf.substring(i - 1, i)) * (11 - i);\n\n  resto = soma * 10 % 11;\n  if (resto == 10 || resto == 11) resto = 0;\n  if (resto != parseInt(cpf.substring(9, 10))) return false;\n  soma = 0;\n\n  for (var i = 1; i <= 10; i++) soma = soma + parseInt(cpf.substring(i - 1, i)) * (12 - i);\n\n  resto = soma * 10 % 11;\n  if (resto == 10 || resto == 11) resto = 0;\n  if (resto != parseInt(cpf.substring(10, 11))) return false;\n  return true;\n}\n\nfunction isValidPhone(phone) {\n  return /^(?:(?:\\+|00)?(55)\\s?)?(?:\\(?([1-9][0-9])\\)?\\s?)?(?:((?:9\\d|[2-9])\\d{3})\\-?(\\d{4}))$/.test(phone);\n}\n\nfunction isValidDate(date) {\n  return /^((((0?[1-9]|[12]\\d|3[01])[\\.\\-\\/](0?[13578]|1[02])      [\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|((0?[1-9]|[12]\\d|30)[\\.\\-\\/](0?[13456789]|1[012])[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|((0?[1-9]|1\\d|2[0-8])[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|(29[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00)))|(((0[1-9]|[12]\\d|3[01])(0[13578]|1[02])((1[6-9]|[2-9]\\d)?\\d{2}))|((0[1-9]|[12]\\d|30)(0[13456789]|1[012])((1[6-9]|[2-9]\\d)?\\d{2}))|((0[1-9]|1\\d|2[0-8])02((1[6-9]|[2-9]\\d)?\\d{2}))|(2902((1[6-9]|[2-9]\\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00))))$/.test(date);\n}\n\nyup.addMethod(yup.string, \"cpf\", function (message) {\n  // return yup.mixed().test(\"cpf\", message || \"número de CPF inválido\", value => cpfValidate(value));\n  return yup.mixed().test(\"cpf\", message || \"número de CPF inválido\", value => isValidCPF(value));\n});\nyup.addMethod(yup.string, \"phone\", function (message) {\n  return yup.mixed().test(\"phone\", message || \"número de celular inválido\", value => isValidPhone(value));\n});\nyup.addMethod(yup.string, \"date\", function (message) {\n  return yup.mixed().test(\"date\", message || \"data inválida\", value => isValidDate(value));\n}); // const SignupSchema = yup.object().shape({\n//   // firstName: yup.string().required(),\n//   cpf: yup\n//     .string()\n//     // .required(), \n// \t\t// .transform(function removeNonNumericalChar(value) {\n// \t\t// \tconsole.log(\"Transforming\", value);\n// \t\t// \treturn this.isType(value) && value !== null ? value.replace(/\\D/g, \"\") : value;\n// \t\t// })\n// \t\t// .matches(regexCPF, \"formato inválido\")\n//     .cpf(\"informe um CPF válido\")\n//     ,\n//   first: yup\n//     .string()\n//     .required(),  \n//   // email: yup.string().required(),\n//   last: yup\n//     .number()\n//     // .required()\n//     .positive()\n//     .integer(),    \n//   // message: yup.string().url(),\n//   // checkboxInput: yup.boolean().oneOf([true],'aceite obrigatório')\n// });\n\nconst SignupSchema = yup.object().shape({\n  cpf: yup.string().cpf(\"Por favor, informe um CPF válido\"),\n  nome: yup.string().required(),\n  email: yup.string().required().email(),\n  telefone: yup.string().phone(\"Por favor, informe um número de celular válido\"),\n  dataNascimento: yup.string().date(\"Por favor, informe uma data válida\"),\n  cep: yup.string().required(),\n  endereco: yup.string().required(),\n  numero: yup.number().required(),\n  complemento: yup.string(),\n  bairro: yup.string().required(),\n  estado: yup.string().required(),\n  cidade: yup.string().required(),\n  idade: yup.number().required(),\n  peso: yup.string().required(),\n  altura: yup.string().matches(/[0-9]{1}\\,[0-9]{2}/g, 'Por favor, insira uma altura válida').required(),\n  outroPatologia: yup.string().required() // receberContatoEmail: yup.boolean().oneOf([true],'aceite obrigatório'),\n  // receberContatoSMS: yup.boolean().oneOf([true],'aceite obrigatório'),\n  // receberContatoWhatsApp: yup.boolean().oneOf([true],'aceite obrigatório')\n\n}); // const schema = yup.object().shape({\n//   first: yup.string().required(),\n//   age: yup.number().positive().integer().required(),\n// });\n\nexport default function SectionAnamnese(props) {\n  // const { register, errors, handleSubmit} = useForm({\n  //   validationSchema: SignupSchema\n  // });\n  const {\n    register,\n    trigger,\n    handleSubmit,\n    setValue,\n    getValues,\n    errors\n  } = useForm({\n    resolver: yupResolver(SignupSchema),\n    mode: \"onBlur\" // mode: \"onChange\"\n\n  });\n\n  const onSubmit = data => {\n    console.log(data); // alert(JSON.stringify(data, null));\n  };\n\n  useEffect(() => {\n    // history.pushState({}, null, \"/checkout/anamnese\");\n    TagManager.dataLayer({\n      dataLayer: {\n        event: \"anamneseView\",\n        userId: '001',\n        userProject: 'project',\n        page: 'home'\n      }\n    });\n  }, []);\n  const [checked, setChecked] = React.useState([]);\n\n  const handleToggle = value => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const [isAluno, setIsAluno] = React.useState(false);\n  const [activeForm, setActiveForm] = React.useState(0);\n  const [activeField, setActiveField] = React.useState([\"idade\"]); // const [activeField, setActiveField] = React.useState([\"peso\", \"altura\"]);\n\n  const [isDisableNext, setIsDisableNext] = React.useState(true);\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  const [isOutro, setIsOutro] = React.useState(false);\n\n  const handleNext = async () => {\n    // console.log(activeField);\n    // const result = await trigger(activeField)\n    // console.log(result);\n    const result = true;\n\n    if (result) {\n      console.log(getValues());\n\n      if (activeForm == 18) {\n        const anamneseForm = getValues();\n        props.setDataSale(prevDataSale => {\n          return {\n            customer: _objectSpread({}, prevDataSale.customer, {\n              sex: anamneseForm.sexo,\n              anamnese: _objectSpread({}, prevDataSale.customer.anamnese, {}, anamneseForm)\n            })\n          };\n        });\n        props.sendDataForm();\n      } else {\n        setIsDisableNext(true);\n        setIsOutro(false);\n        setActiveForm(prevActiveStep => prevActiveStep + 1);\n        handleFieldActive(activeForm + 1);\n      }\n    } // setActiveForm((prevActiveStep) => prevActiveStep + 1);\n\n  };\n\n  const handleBack = type => {\n    if (activeForm !== 0) {\n      setIsDisableNext(false);\n      setActiveForm(prevActiveStep => prevActiveStep - 1);\n      handleFieldActive(activeForm - 1);\n    } else {\n      props.setStepCheckout(1);\n    }\n  };\n\n  const handleFocus = event => {\n    // event.target.select()\n    if (event.target.value == \"\") {\n      event.target.selectionStart = 0;\n      event.target.selectionEnd = 0;\n    } else {\n      event.target.select();\n    }\n  };\n\n  const handleChange = async event => {\n    const result = await trigger(activeField);\n    console.log(activeField);\n    console.log(result);\n\n    if (result) {\n      setIsDisableNext(false);\n    } else {\n      setIsDisableNext(true);\n    }\n  };\n\n  const handleChangeOutro = async (event, name) => {\n    setValue(name, event.target.value);\n    const result = await trigger(name); // console.log(name);\n    // console.log(result);\n\n    if (result) {\n      setIsDisableNext(false);\n    } else {\n      setIsDisableNext(true);\n    }\n  };\n\n  const handleFieldActive = step => {\n    console.log(\"handleFieldActive\");\n\n    switch (step) {\n      case 0:\n        setActiveField(\"idade\");\n        break;\n\n      case 1:\n        setActiveField(\"sexo\");\n        break;\n\n      case 2:\n        setActiveField([\"peso\", \"altura\"]);\n        break;\n\n      case 3:\n        setActiveField([\"objetivo\"]);\n        break;\n\n      case 4:\n        setActiveField([\"habitoTreino\", \"frequenciaTreino\"]);\n        break;\n\n      case 5:\n        setActiveField([\"fazMusculacao\"]);\n        break;\n\n      case 6:\n        setActiveField([\"fazAulas\"]);\n        break;\n\n      case 7:\n        setActiveField([\"sedentario\", \"sedentarioTempo\"]);\n        break;\n\n      case 8:\n        setActiveField([\"tempoPorDia\"]);\n        break;\n\n      case 9:\n        setActiveField([\"periodo\"]);\n        break;\n\n      case 10:\n        setActiveField([\"patologia\", \"outroPatologia\"]);\n        break;\n\n      case 11:\n        setActiveField([\"osseoArticular\", \"qualOsseoArticular\"]);\n        break;\n\n      case 12:\n        setActiveField([\"cirurgia\", \"qualCirurgia\"]);\n        break;\n\n      case 13:\n        setActiveField([\"internacao\", \"qualInternacao\"]);\n        break;\n\n      case 14:\n        setActiveField([\"medicamento\", \"qualMedicamento\"]);\n        break;\n\n      case 15:\n        setActiveField([\"fuma\"]);\n        break;\n\n      case 16:\n        setActiveField([\"nutricionista\"]);\n        break;\n\n      case 17:\n        setActiveField([\"personalTrainer\"]);\n        break;\n\n      case 18:\n        setActiveField([\"equipamentos\", \"qualEquipamentos\"]);\n        break;\n\n      default:\n        setActiveField(\"idade\");\n        break;\n    }\n\n    console.log(step); // console.log(activeField);\n  };\n\n  const setValueForm = (name, value, outro) => {\n    setValue(name, value); // console.log(getValues());\n\n    if (outro) {\n      setIsOutro(true);\n    } else {\n      handleNext();\n    }\n  }; // useEffect(() => {\n  //   console.log(\"teste de erro\");\n  //   console.log(errors[activeField]);  \n  //   !errors[activeField] && setIsDisableNext(false);\n  // }, [ errors[activeField] ]);\n  // useEffect(() => {\n  //   if(isOutro) {\n  //     register(\"outroPatologia\");\n  //   }  \n  //  }, [ isOutro ]);\n\n\n  const [anamnese, setAnamnese] = React.useState({\n    idade: \"TESTE\",\n    sexo: \"TESTE\",\n    peso: \"TESTE\",\n    altura: \"TESTE\",\n    objetivo: \"TESTE\",\n    habitoTreino: \"TESTE\",\n    frequenciaTreino: \"TESTE\",\n    fazMusculacao: \"TESTE\",\n    fazAulas: \"TESTE\",\n    sedentario: \"TESTE\",\n    sedentarioTempo: \"TESTE\",\n    reclusaoTreino: \"TESTE\",\n    tempoPorDia: \"TESTE\",\n    periodo: \"TESTE\",\n    patologia: \"TESTE\",\n    outroPatologia: \"TESTE\",\n    osseoArticular: \"TESTE\",\n    qualOsseoArticular: \"TESTE\",\n    cirurgia: \"TESTE\",\n    qualCirurgia: \"TESTE\",\n    internacao: \"TESTE\",\n    qualInternacao: \"TESTE\",\n    medicamento: \"TESTE\",\n    qualMedicamento: \"TESTE\",\n    fuma: \"TESTE\",\n    nutricionista: \"TESTE\",\n    personalTrainer: \"TESTE\",\n    equipamentos: \"TESTE\"\n  });\n\n  const fetchData = async event => {\n    setError(false);\n    let cep = event.target.value;\n    setAnamnese(prevAnamnese => {\n      return _objectSpread({}, prevAnamnese, {\n        endereco: \"\",\n        bairro: \"\",\n        estado: \"\",\n        cidade: \"\"\n      });\n    });\n    await axios.get(`https://viacep.com.br/ws/${cep}/json/`).then(res => {\n      // setError(false);\n      // setUsers(prevState => [...prevState, ...res.data]);\n      // setUser(res.data);\n      // console.log(res.data);\n      if (res.data.error) {\n        setError(true);\n        return;\n      }\n\n      setAnamnese(prevAnamnese => {\n        return _objectSpread({}, prevAnamnese, {\n          cep: res.data.cep,\n          endereco: res.data.logradouro,\n          bairro: res.data.bairro,\n          estado: res.data.uf,\n          cidade: res.data.localidade\n        });\n      }); // console.log(res.data.cliente);     \n    }).catch(error => {\n      console.log(error);\n      setError(true);\n    }).finally(() => {// setLoading(false);\n    });\n  };\n\n  const classes = useStyles();\n  return __jsx(\"div\", {\n    className: \"cd-section\"\n  }, __jsx(\"div\", {\n    className: classes.contacts + \" \" + classes.section // style={{ backgroundImage: `url(${city})` }}\n    ,\n    style: {\n      backgroundColor: \"#ffffff\"\n    }\n  }, __jsx(\"div\", {\n    className: classes.container\n  }, __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 5\n  }, __jsx(Grow, _extends({\n    in: true,\n    style: {\n      transformOrigin: '0 0 0'\n    }\n  }, true ? {\n    timeout: 1000\n  } : {}), __jsx(Card, {\n    className: classes.card1\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(CardHeader, {\n    contact: true,\n    color: \"primary\",\n    className: classes.textCenter\n  }, __jsx(\"h4\", {\n    className: classes.cardTitle\n  }, \"Anamnese\")), __jsx(Grow, _extends({\n    in: activeForm === 0,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 0 ? \"block\" : \"none\"\n    }\n  }, activeForm === 0 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 8,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Qual \\xE9 sua idade?\",\n    labelError: errors.idade && errors.idade.message,\n    id: \"idade\",\n    error: errors.idade ? true : false,\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      type: \"tel\",\n      name: \"idade\",\n      inputRef: register,\n      onChange: handleChange //   onFocus: handleFocus,\n      //   inputComponent: TextMaskCustom,\n      //   startAdornment: (\n      //     <InputAdornment position=\"start\">\n      //       <AssignmentInd className={classes.inputIconsColor} />\n      //     </InputAdornment>\n      //   ) \n\n    }\n  }))))), __jsx(Grow, _extends({\n    in: activeForm === 1,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 1 ? \"block\" : \"none\"\n    }\n  }, activeForm === 1 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 8,\n    md: 8\n  }, __jsx(\"input\", {\n    hidden: true,\n    name: \"sexo\",\n    type: \"text\",\n    ref: register\n  }), __jsx(\"label\", null, \"Qual o seu sexo?\"), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"sexo\", \"M\")\n  }, \"Masculino\"), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"sexo\", \"F\")\n  }, \"Feminino\"))))), __jsx(Grow, _extends({\n    in: activeForm === 2,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 2 ? \"block\" : \"none\"\n    }\n  }, activeForm === 2 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 8,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Qual \\xE9 o seu peso?\",\n    labelError: errors.peso && errors.peso.message,\n    error: errors.peso ? true : false,\n    id: \"peso\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      type: \"tel\",\n      name: \"peso\",\n      placeholder: \"0,00\",\n      inputComponent: PesoMask,\n      inputRef: register,\n      onChange: handleChange,\n      endAdornment: __jsx(InputAdornment, {\n        position: \"start\"\n      }, \"Kg\")\n    }\n  }), __jsx(CustomInput, {\n    labelText: \"Qual a sua altura? \",\n    labelError: errors.altura && errors.altura.message,\n    error: errors.altura ? true : false,\n    id: \"altura\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      type: \"tel\",\n      name: \"altura\",\n      // placeholder: \"0,00\",\n      inputComponent: AlturaMask,\n      inputRef: register,\n      onChange: handleChange,\n      onClick: handleFocus,\n      endAdornment: __jsx(InputAdornment, {\n        position: \"start\"\n      }, \"m\")\n    }\n  }))))), __jsx(Grow, _extends({\n    in: activeForm === 3,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 3 ? \"block\" : \"none\"\n    }\n  }, activeForm === 3 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 9\n  }, __jsx(\"input\", {\n    hidden: true,\n    name: \"objetivo\",\n    type: \"text\",\n    ref: register\n  }), __jsx(\"label\", null, \"Qual \\xE9 o seu objetivo?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"objetivo\", \"Emagrecer\")\n  }, \"Emagrecer\"), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"objetivo\", \"Aumentar a Massa Magra\")\n  }, \"Aumentar a Massa Magra\"), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"objetivo\", \"Manter o Condicionamento Físico\")\n  }, \"Manter o Condicionamento F\\xEDsico\"), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"objetivo\", \"Bem Estar\")\n  }, \"Bem Estar\"), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"objetivo\", \"Indicação Médica\")\n  }, \"Indica\\xE7\\xE3o M\\xE9dica\"))))), __jsx(Grow, _extends({\n    in: activeForm === 4,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 4 ? \"block\" : \"none\"\n    }\n  }, activeForm === 4 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(\"input\", {\n    hidden: true,\n    name: \"habitoTreino\",\n    type: \"text\",\n    ref: register\n  }), __jsx(\"input\", {\n    hidden: true,\n    name: \"frequenciaTreino\",\n    type: \"text\",\n    ref: register\n  }), !isOutro ? __jsx(React.Fragment, null, __jsx(\"label\", null, \"Possui o h\\xE1bito de treinar?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"habitoTreino\", \"SIM\", true)\n  }, \"Sim\"), __jsx(Button, {\n    color: \"secondary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"habitoTreino\", \"NÃO\")\n  }, \"N\\xE3o\")) : __jsx(React.Fragment, null, __jsx(\"label\", null, \"Quantas vezes na semana?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"frequenciaTreino\", \"1 a 2 vezes\")\n  }, \"1 a 2 vezes\"), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"frequenciaTreino\", \"3 a 5 vezes\")\n  }, \"3 a 5 vezes\"), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"frequenciaTreino\", \"6 a 7 vezes\")\n  }, \"6 a 7 vezes\")))))), __jsx(Grow, _extends({\n    in: activeForm === 5,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 5 ? \"block\" : \"none\"\n    }\n  }, activeForm === 5 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 9\n  }, __jsx(\"input\", {\n    hidden: true,\n    name: \"fazMusculacao\",\n    type: \"text\",\n    ref: register\n  }), __jsx(\"label\", null, \"Na academia, costuma fazer muscula\\xE7\\xE3o?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"fazMusculacao\", \"SIM\")\n  }, \"Sim\"), __jsx(Button, {\n    color: \"secondary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"fazMusculacao\", \"NÃO\")\n  }, \"N\\xE3o\"))))), __jsx(Grow, _extends({\n    in: activeForm === 6,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 6 ? \"block\" : \"none\"\n    }\n  }, activeForm === 6 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 9\n  }, __jsx(\"input\", {\n    hidden: true,\n    name: \"fazAulas\",\n    type: \"text\",\n    ref: register\n  }), __jsx(\"label\", null, \"Na academia, costuma fazer aulas?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"fazAulas\", \"SIM\")\n  }, \"Sim\"), __jsx(Button, {\n    color: \"secondary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"fazAulas\", \"NÃO\")\n  }, \"N\\xE3o\"))))), __jsx(Grow, _extends({\n    in: activeForm === 7,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 7 ? \"block\" : \"none\"\n    }\n  }, activeForm === 7 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(\"input\", {\n    hidden: true,\n    name: \"sedentario\",\n    type: \"text\",\n    ref: register\n  }), __jsx(\"input\", {\n    hidden: true,\n    name: \"sedentarioTempo\",\n    type: \"text\",\n    ref: register\n  }), !isOutro ? __jsx(React.Fragment, null, __jsx(\"label\", null, \"Atualmente, se considera sedent\\xE1rio?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"sedentario\", \"SIM\", true)\n  }, \"Sim\"), __jsx(Button, {\n    color: \"secondary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"sedentario\", \"NÃO\")\n  }, \"N\\xE3o\")) : __jsx(React.Fragment, null, __jsx(\"label\", null, \"H\\xE1 quanto tempo?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"sedentarioTempo\", \"6 meses\")\n  }, \"6 meses\"), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"sedentarioTempo\", \"6 meses a 2 anos\")\n  }, \"6 meses a 2 anos\"), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"sedentarioTempo\", \"Há mais de 2 anos\")\n  }, \"H\\xE1 mais de 2 anos\")))))), __jsx(Grow, _extends({\n    in: activeForm === 8,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 8 ? \"block\" : \"none\"\n    }\n  }, activeForm === 8 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(\"input\", {\n    hidden: true,\n    name: \"tempoPorDia\",\n    type: \"text\",\n    ref: register\n  }), __jsx(\"label\", null, \"Pretende treinar quanto tempo por dia?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"tempoPorDia\", \"10 a 30 minutos\")\n  }, \"10 a 30 minutos\"), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"tempoPorDia\", \"40 a 45 minutos\")\n  }, \"40 a 45 minutos\"), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"tempoPorDia\", \"1 hora ou mais\")\n  }, \"1 hora ou mais\"))))), __jsx(Grow, _extends({\n    in: activeForm === 9,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 9 ? \"block\" : \"none\"\n    }\n  }, activeForm === 9 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(\"input\", {\n    hidden: true,\n    name: \"periodo\",\n    type: \"text\",\n    ref: register\n  }), __jsx(\"label\", null, \"Em qual per\\xEDodo?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"periodo\", \"Manhã\")\n  }, \"Manh\\xE3\"), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"periodo\", \"Tarde\")\n  }, \"Tarde\"), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"periodo\", \"Noite\")\n  }, \"Noite\"))))), __jsx(Grow, _extends({\n    in: activeForm === 10,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 10 ? \"block\" : \"none\"\n    }\n  }, activeForm === 10 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(\"input\", {\n    hidden: true,\n    name: \"patologia\",\n    type: \"text\",\n    ref: register\n  }), __jsx(\"input\", {\n    hidden: true,\n    name: \"outroPatologia\",\n    type: \"text\",\n    ref: register\n  }), !isOutro ? __jsx(React.Fragment, null, __jsx(\"label\", null, \"Possui algum patologia?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"patologia\", \"coracao\")\n  }, \"Sim, no cora\\xE7\\xE3o\"), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"patologia\", \"pulmao\")\n  }, \"Sim, no pulm\\xE3o\"), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"patologia\", \"outro\", true)\n  }, \"Sim, em outro local\"), __jsx(Button, {\n    color: \"secondary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"patologia\", \"NÃO\")\n  }, \"N\\xE3o\")) : __jsx(React.Fragment, null, __jsx(CustomInput, {\n    labelText: \"Onde seria?\",\n    labelError: errors.outroPatologia && errors.outroPatologia.message,\n    error: errors.outroPatologia ? true : false,\n    id: \"outroPatologiaInput\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"outroPatologiaInput\",\n      inputRef: register,\n      onChange: event => handleChangeOutro(event, \"outroPatologia\")\n    }\n  })))))), __jsx(Grow, _extends({\n    in: activeForm === 11,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 11 ? \"block\" : \"none\"\n    }\n  }, activeForm === 11 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(\"input\", {\n    hidden: true,\n    name: \"osseoArticular\",\n    type: \"text\",\n    ref: register\n  }), __jsx(\"input\", {\n    hidden: true,\n    name: \"qualOsseoArticular\",\n    type: \"text\",\n    ref: register\n  }), !isOutro ? __jsx(React.Fragment, null, __jsx(\"label\", null, \"Possui algum problema \\xF3sseo articular?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"osseoArticular\", \"SIM\", true)\n  }, \"Sim\"), __jsx(Button, {\n    color: \"secondary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"osseoArticular\", \"NÃO\")\n  }, \"N\\xE3o\")) : __jsx(React.Fragment, null, __jsx(CustomInput, {\n    labelText: \"Qual seria?\",\n    labelError: errors.qualOsseoArticular && errors.qualOsseoArticular.message,\n    error: errors.qualOsseoArticular ? true : false,\n    id: \"qualOsseoArticularInput\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"qualOsseoArticularInput\",\n      inputRef: register,\n      onChange: event => handleChangeOutro(event, \"qualOsseoArticular\")\n    }\n  })))))), __jsx(Grow, _extends({\n    in: activeForm === 12,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 12 ? \"block\" : \"none\"\n    }\n  }, activeForm === 12 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(\"input\", {\n    hidden: true,\n    name: \"cirurgia\",\n    type: \"text\",\n    ref: register\n  }), __jsx(\"input\", {\n    hidden: true,\n    name: \"qualCirurgia\",\n    type: \"text\",\n    ref: register\n  }), !isOutro ? __jsx(React.Fragment, null, __jsx(\"label\", null, \"J\\xE1 sofreu alguma cirurgia?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"cirurgia\", \"SIM\", true)\n  }, \"Sim\"), __jsx(Button, {\n    color: \"secondary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"cirurgia\", \"NÃO\")\n  }, \"N\\xE3o\")) : __jsx(React.Fragment, null, __jsx(CustomInput, {\n    labelText: \"Qual cirurgia?\",\n    labelError: errors.qualCirurgia && errors.qualCirurgia.message,\n    error: errors.qualCirurgia ? true : false,\n    id: \"qualCirurgiaInput\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"qualCirurgiaInput\",\n      inputRef: register,\n      onChange: event => handleChangeOutro(event, \"qualCirurgia\")\n    }\n  })))))), __jsx(Grow, _extends({\n    in: activeForm === 13,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 13 ? \"block\" : \"none\"\n    }\n  }, activeForm === 13 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(\"input\", {\n    hidden: true,\n    name: \"internacao\",\n    type: \"text\",\n    ref: register\n  }), __jsx(\"input\", {\n    hidden: true,\n    name: \"qualInternacao\",\n    type: \"text\",\n    ref: register\n  }), !isOutro ? __jsx(React.Fragment, null, __jsx(\"label\", null, \"Sofreu alguma interna\\xE7\\xE3o recentemente?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"internacao\", \"SIM\", true)\n  }, \"Sim\"), __jsx(Button, {\n    color: \"secondary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"internacao\", \"NÃO\")\n  }, \"N\\xE3o\")) : __jsx(React.Fragment, null, __jsx(CustomInput, {\n    labelText: \"Qual seria?\",\n    labelError: errors.qualInternacao && errors.qualInternacao.message,\n    error: errors.qualInternacao ? true : false,\n    id: \"qualInternacaoInput\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"qualInternacaoInput\",\n      inputRef: register,\n      onChange: event => handleChangeOutro(event, \"qualInternacao\")\n    }\n  })))))), __jsx(Grow, _extends({\n    in: activeForm === 14,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 14 ? \"block\" : \"none\"\n    }\n  }, activeForm === 14 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(\"input\", {\n    hidden: true,\n    name: \"medicamento\",\n    type: \"text\",\n    ref: register\n  }), __jsx(\"input\", {\n    hidden: true,\n    name: \"qualMedicamento\",\n    type: \"text\",\n    ref: register\n  }), !isOutro ? __jsx(React.Fragment, null, __jsx(\"label\", null, \"Faz uso de algum medicamento?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"medicamento\", \"SIM\", true)\n  }, \"Sim\"), __jsx(Button, {\n    color: \"secondary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"medicamento\", \"NÃO\")\n  }, \"N\\xE3o\")) : __jsx(React.Fragment, null, __jsx(CustomInput, {\n    labelText: \"Qual seria?\",\n    labelError: errors.qualMedicamento && errors.qualMedicamento.message,\n    error: errors.qualMedicamento ? true : false,\n    id: \"qualMedicamentoInput\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"qualMedicamentoInput\",\n      inputRef: register,\n      onChange: event => handleChangeOutro(event, \"qualMedicamento\")\n    }\n  })))))), __jsx(Grow, _extends({\n    in: activeForm === 15,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 15 ? \"block\" : \"none\"\n    }\n  }, activeForm === 15 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(\"input\", {\n    hidden: true,\n    name: \"fuma\",\n    type: \"text\",\n    ref: register\n  }), __jsx(\"label\", null, \"Possui o h\\xE1bito de fumar?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"fuma\", \"SIM\")\n  }, \"Sim\"), __jsx(Button, {\n    color: \"secondary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"fuma\", \"NÃO\")\n  }, \"N\\xE3o\"))))), __jsx(Grow, _extends({\n    in: activeForm === 16,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 16 ? \"block\" : \"none\"\n    }\n  }, activeForm === 16 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(\"input\", {\n    hidden: true,\n    name: \"nutricionista\",\n    type: \"text\",\n    ref: register\n  }), __jsx(\"label\", null, \"Faz acompanhamento com um(a) nutricionista?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"nutricionista\", \"SIM\")\n  }, \"Sim\"), __jsx(Button, {\n    color: \"secondary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"nutricionista\", \"NÃO\")\n  }, \"N\\xE3o\"))))), __jsx(Grow, _extends({\n    in: activeForm === 17,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 17 ? \"block\" : \"none\"\n    }\n  }, activeForm === 17 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(\"input\", {\n    hidden: true,\n    name: \"personalTrainer\",\n    type: \"text\",\n    ref: register\n  }), __jsx(\"label\", null, \"Faz acompanhamento com um(a) personal trainer?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"personalTrainer\", \"SIM\")\n  }, \"Sim\"), __jsx(Button, {\n    color: \"secondary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"personalTrainer\", \"NÃO\")\n  }, \"N\\xE3o\"))))), __jsx(Grow, _extends({\n    in: activeForm === 18,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 18 ? \"block\" : \"none\"\n    }\n  }, activeForm === 18 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(\"input\", {\n    hidden: true,\n    name: \"equipamentosSN\",\n    type: \"text\",\n    ref: register\n  }), __jsx(\"input\", {\n    hidden: true,\n    name: \"equipamentos\",\n    type: \"text\",\n    ref: register\n  }), !isOutro ? __jsx(React.Fragment, null, __jsx(\"label\", null, \"Possui algum equipamento de treino?\"), __jsx(\"br\", null), __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"equipamentosSN\", \"SIM\", true)\n  }, \"Sim\"), __jsx(Button, {\n    color: \"secondary\",\n    fullWidth: true,\n    onClick: () => setValueForm(\"equipamentosSN\", \"NÃO\")\n  }, \"N\\xE3o\")) : __jsx(React.Fragment, null, __jsx(CustomInput, {\n    labelText: \"Quais seriam?\",\n    labelError: errors.equipamentos && errors.equipamentos.message,\n    error: errors.equipamentos ? true : false,\n    id: \"equipamentosInput\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"equipamentosInput\",\n      multiline: true,\n      rows: 5,\n      inputRef: register,\n      onChange: event => handleChangeOutro(event, \"equipamentos\")\n    }\n  })))))), __jsx(CardFooter, null, __jsx(GridContainer, {\n    justify: \"center\",\n    style: {\n      margin: \"0\",\n      width: \"100%\"\n    }\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12\n  }, __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: handleNext,\n    style: {\n      display: isDisableNext ? \"none\" : \"block\"\n    }\n  }, \"Pr\\xF3ximo\")), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12\n  }, __jsx(Button, {\n    simple: true,\n    color: \"primary\",\n    fullWidth: true,\n    onClick: handleBack\n  }, \"Voltar\"))))))))))));\n}","map":null,"metadata":{},"sourceType":"module"}
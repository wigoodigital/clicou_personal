{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport axios from 'axios'; // react components used to create a google map\n\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\nimport TagManager from 'react-gtm-module'; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport Box from '@material-ui/core/Box'; // @material-ui/icons\n\nimport PinDrop from \"@material-ui/icons/PinDrop\";\nimport Phone from \"@material-ui/icons/Phone\";\nimport Check from \"@material-ui/icons/Check\";\nimport Email from \"@material-ui/icons/Email\";\nimport EventIcon from '@material-ui/icons/Event';\nimport Favorite from \"@material-ui/icons/Favorite\";\nimport AssignmentInd from \"@material-ui/icons/AssignmentInd\"; // core components\n\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport InfoArea from \"components/InfoArea/InfoArea.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport CardFooter from \"components/Card/CardFooter.js\";\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport SnackbarContent from \"components/Snackbar/SnackbarContent.js\";\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Grow from '@material-ui/core/Grow';\nimport InputMask from \"react-input-mask\";\nimport MaskedInput from 'react-text-mask';\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from '@hookform/resolvers';\nimport * as yup from \"yup\";\nimport { setLocale } from 'yup';\nimport checkoutStyle from \"assets/jss/nextjs-material-kit-pro/pages/checkoutSections/checkoutStyle.js\";\nimport chipCard from \"assets/img/icon-cartoes/icon-chip.png\";\nimport visa from \"assets/img/icon-cartoes/icon-visa.png\";\nimport mastercard from \"assets/img/icon-cartoes/icon-master.png\";\nimport diners from \"assets/img/icon-cartoes/icon-diners.png\";\nimport amex from \"assets/img/icon-cartoes/icon-amex.png\";\nimport discover from \"assets/img/icon-cartoes/icon-discover.png\";\nimport hipercard from \"assets/img/icon-cartoes/icon-hipercard.png\";\nimport elo from \"assets/img/icon-cartoes/icon-elo.png\";\nimport jcb from \"assets/img/icon-cartoes/icon-jcb.png\";\nimport aura from \"assets/img/icon-cartoes/icon-aura.png\";\nimport nocard from \"assets/img/icon-cartoes/icon-nocard.png\";\nconst useStyles = makeStyles(checkoutStyle);\n\nfunction TextMaskCustom(props) {\n  const {\n    inputRef\n  } = props,\n        other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return __jsx(MaskedInput, _extends({}, other, {\n    ref: ref => {\n      inputRef(ref ? ref.inputElement : null);\n    },\n    mask: [/[0-9]/, /[0-9]/, /[0-9]/, '.', /[0-9]/, /[0-9]/, /[0-9]/, '.', /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/],\n    placeholderChar: '\\u2000',\n    guide: false,\n    showMask: true\n  }));\n}\n\nfunction ValidadeMask(props) {\n  const {\n    inputRef\n  } = props,\n        other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return __jsx(MaskedInput, _extends({}, other, {\n    ref: ref => {\n      inputRef(ref ? ref.inputElement : null);\n    },\n    mask: [/[0-9]/, /[0-9]/, '/', /[0-9]/, /[0-9]/],\n    placeholderChar: '\\u2000',\n    guide: false,\n    showMask: true\n  }));\n}\n\nfunction CVVMask(props) {\n  const {\n    inputRef\n  } = props,\n        other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return __jsx(MaskedInput, _extends({}, other, {\n    ref: ref => {\n      inputRef(ref ? ref.inputElement : null);\n    } // mask={['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]}\n    ,\n    mask: [/[0-9]/, /[0-9]/, /[0-9]/],\n    placeholderChar: '\\u2000',\n    guide: false,\n    showMask: true\n  }));\n}\n\nfunction CardMask(props) {\n  const {\n    inputRef\n  } = props,\n        other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return __jsx(MaskedInput, _extends({}, other, {\n    ref: ref => {\n      inputRef(ref ? ref.inputElement : null);\n    } // mask={['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]}\n    ,\n    mask: [/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, ' ', /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, ' ', /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, ' ', /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/],\n    placeholderChar: '\\u2000',\n    guide: false,\n    showMask: true\n  }));\n}\n\nsetLocale({\n  mixed: {\n    notType: function notType(_ref) {\n      switch (_ref.type) {\n        case 'number':\n          return 'deve ser um número';\n\n        case 'string':\n          return 'deve ser um texto';\n\n        default:\n          return 'formato errado';\n      }\n    },\n    default: 'é inválido',\n    required: 'Desculpe, este campo é obrigatório',\n    oneOf: 'deve ser um dos seguintes valores: ${values}',\n    notOneOf: 'não pode ser um dos seguintes valores: ${values}'\n  },\n  string: {\n    length: 'deve ter exatamente ${length} caracteres',\n    min: 'deve ter pelo menos ${min} caracteres',\n    max: 'deve ter no máximo ${max} caracteres',\n    email: 'Por favor, informe um e-mail inválido',\n    url: 'deve ter um formato de URL válida',\n    trim: 'não deve conter espaços no início ou no fim.',\n    lowercase: 'deve estar em maiúsculo',\n    uppercase: 'deve estar em minúsculo'\n  },\n  number: {\n    min: 'deve ser no mínimo ${min}',\n    max: 'deve ser no máximo ${max}',\n    lessThan: 'deve ser menor que ${less}',\n    moreThan: 'deve ser maior que ${more}',\n    notEqual: 'não pode ser igual à ${notEqual}',\n    positive: 'deve ser um número posítivo',\n    negative: 'deve ser um número negativo',\n    integer: 'deve ser um número inteiro'\n  },\n  date: {\n    min: 'deve ser maior que a data ${min}',\n    max: 'deve ser menor que a data ${max}'\n  },\n  array: {\n    min: 'deve ter no mínimo ${min} itens',\n    max: 'deve ter no máximo ${max} itens'\n  }\n});\nconst regexCPF = /([0-9]{2}[\\.]?[0-9]{3}[\\.]?[0-9]{3}[\\/]?[0-9]{4}[-]?[0-9]{2})|([0-9]{3}[\\.]?[0-9]{3}[\\.]?[0-9]{3}[-]?[0-9]{2})/gm;\n\nfunction cpfValidate(cpf) {\n  console.log(\"Validatring\", cpf);\n  return cpf.length > 10;\n}\n\nfunction isValidCPF(cpf) {\n  if (typeof cpf !== \"string\") return false;\n  cpf = cpf.replace(/[\\s.-]*/igm, '');\n\n  if (!cpf || cpf.length != 11 || cpf == \"00000000000\" || cpf == \"11111111111\" || cpf == \"22222222222\" || cpf == \"33333333333\" || cpf == \"44444444444\" || cpf == \"55555555555\" || cpf == \"66666666666\" || cpf == \"77777777777\" || cpf == \"88888888888\" || cpf == \"99999999999\") {\n    return false;\n  }\n\n  var soma = 0;\n  var resto;\n\n  for (var i = 1; i <= 9; i++) soma = soma + parseInt(cpf.substring(i - 1, i)) * (11 - i);\n\n  resto = soma * 10 % 11;\n  if (resto == 10 || resto == 11) resto = 0;\n  if (resto != parseInt(cpf.substring(9, 10))) return false;\n  soma = 0;\n\n  for (var i = 1; i <= 10; i++) soma = soma + parseInt(cpf.substring(i - 1, i)) * (12 - i);\n\n  resto = soma * 10 % 11;\n  if (resto == 10 || resto == 11) resto = 0;\n  if (resto != parseInt(cpf.substring(10, 11))) return false;\n  return true;\n}\n\nfunction isValidPhone(phone) {\n  return /^(?:(?:\\+|00)?(55)\\s?)?(?:\\(?([1-9][0-9])\\)?\\s?)?(?:((?:9\\d|[2-9])\\d{3})\\-?(\\d{4}))$/.test(phone);\n}\n\nfunction isValidDate(date) {\n  return /^((((0?[1-9]|[12]\\d|3[01])[\\.\\-\\/](0?[13578]|1[02])      [\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|((0?[1-9]|[12]\\d|30)[\\.\\-\\/](0?[13456789]|1[012])[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|((0?[1-9]|1\\d|2[0-8])[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|(29[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00)))|(((0[1-9]|[12]\\d|3[01])(0[13578]|1[02])((1[6-9]|[2-9]\\d)?\\d{2}))|((0[1-9]|[12]\\d|30)(0[13456789]|1[012])((1[6-9]|[2-9]\\d)?\\d{2}))|((0[1-9]|1\\d|2[0-8])02((1[6-9]|[2-9]\\d)?\\d{2}))|(2902((1[6-9]|[2-9]\\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00))))$/.test(date);\n}\n\nfunction isValidDateCard(date) {\n  return /^(0[1-9]|1[0-2])\\/?([0-9]{4}|[0-9]{2})$/.test(date);\n}\n\nfunction getCardFlag(cardnumber) {\n  var cardnumber = cardnumber.replace(/[^0-9]+/g, '');\n  var cards = {\n    visa: /^4[0-9]{12}(?:[0-9]{3})/,\n    mastercard: /^5[1-5][0-9]{14}/,\n    diners: /^3(?:0[0-5]|[68][0-9])[0-9]{11}/,\n    amex: /^3[47][0-9]{13}/,\n    discover: /^6(?:011|5[0-9]{2})[0-9]{12}/,\n    hipercard: /^(606282\\d{10}(\\d{3})?)|(3841\\d{15})/,\n    elo: /^((((636368)|(438935)|(504175)|(451416)|(636297))\\d{0,10})|((5067)|(4576)|(4011))\\d{0,12})/,\n    jcb: /^(?:2131|1800|35\\d{3})\\d{11}/,\n    aura: /^(5078\\d{2})(\\d{2})(\\d{11})$/\n  };\n\n  for (var flag in cards) {\n    if (cards[flag].test(cardnumber)) {\n      return flag;\n    }\n  }\n\n  return false;\n}\n\nyup.addMethod(yup.string, \"cpf\", function (message) {\n  // return yup.mixed().test(\"cpf\", message || \"número de CPF inválido\", value => cpfValidate(value));\n  return yup.mixed().test(\"cpf\", message || \"número de CPF inválido\", value => isValidCPF(value));\n});\nyup.addMethod(yup.string, \"phone\", function (message) {\n  return yup.mixed().test(\"phone\", message || \"número de celular inválido\", value => isValidPhone(value));\n});\nyup.addMethod(yup.string, \"date\", function (message) {\n  return yup.mixed().test(\"date\", message || \"data inválida\", value => isValidDate(value));\n});\nyup.addMethod(yup.string, \"dateCard\", function (message) {\n  return yup.mixed().test(\"date\", message || \"Por favor, digite uma data válida\", value => isValidDateCard(value));\n});\nyup.addMethod(yup.string, \"card\", function (message) {\n  return yup.mixed().test(\"card\", message || \"Por favor, digite um número de cartão válido\", value => getCardFlag(value));\n});\nconst SignupSchema = yup.object().shape({\n  id: yup.string(),\n  number: yup.string().card().required(),\n  name: yup.string().required(),\n  validade: yup.string().dateCard().required(),\n  cvv: yup.string().matches(/^[0-9]{3}$/, 'Por favor, digite um CVV válido').required(),\n  cpf: yup.string().cpf(\"Por favor, informe um CPF válido\").required()\n}); // const schema = yup.object().shape({\n//   first: yup.string().required(),\n//   age: yup.number().positive().integer().required(),\n// });\n\nexport default function SectionPayment(props) {\n  // const { register, errors, handleSubmit} = useForm({\n  //   validationSchema: SignupSchema\n  // });\n  const {\n    register,\n    getValues,\n    trigger,\n    handleSubmit,\n    errors\n  } = useForm({\n    resolver: yupResolver(SignupSchema),\n    mode: \"onBlur\" // mode: \"onChange\"\n\n  });\n\n  const onSubmit = data => {\n    console.log(data); // alert(JSON.stringify(data, null));\n  };\n\n  useEffect(() => {\n    // history.pushState({}, null, \"/checkout/payment\");\n    TagManager.dataLayer({\n      dataLayer: {\n        event: \"paymentView\",\n        userId: '001',\n        userProject: 'project',\n        page: 'home'\n      }\n    });\n    TagManager.dataLayer({\n      dataLayer: {\n        'event': 'checkoutOption',\n        'ecommerce': {\n          'checkout_option': {\n            'actionField': {\n              'step': 2\n            }\n          }\n        }\n      }\n    });\n  }, []);\n  const [checked, setChecked] = React.useState([]);\n\n  const handleToggle = value => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const [isAluno, setIsAluno] = React.useState(false);\n  const [activeForm, setActiveForm] = React.useState(0); // const [activeField, setActiveField] = React.useState(\"first\");\n\n  const [activeField, setActiveField] = React.useState([\"id\", \"number\", \"name\", \"validade\", \"cvv\", \"cpf\"]);\n  const [isDisableNext, setIsDisableNext] = React.useState(true);\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  const [activeCard, setActiveCard] = React.useState(nocard);\n  const [cardField, setCardField] = React.useState({\n    number: \"0000 0000 0000 0000\",\n    name: \"NOME IMPRESSO NO CARTÃO\",\n    valid: \"00/00\",\n    cvv: \"000\",\n    cpf: \"\"\n  });\n\n  const handleNext = async type => {\n    // console.log(activeField);\n    const result = await trigger(activeField); // console.log(result);\n\n    if (result) {\n      console.log(getValues());\n      const cardForm = getValues();\n\n      if (activeForm == 0) {\n        let hoje = new Date();\n        let dia = (\"0\" + hoje.getDate()).slice(-2);\n        let mes = (\"0\" + (hoje.getMonth() + 1)).slice(-2);\n        let ano = hoje.getFullYear();\n        let anoFinal = hoje.getFullYear() + 1;\n        props.setDataSale(prevDataSale => {\n          return {\n            customer: _objectSpread({}, prevDataSale.customer, {\n              planData: {\n                companyBranchId: 15956,\n                planId: 344722,\n                consultantId: 11650531,\n                promotionId: 0,\n                startDate: ano + \"-\" + mes + \"-\" + dia,\n                dueDate: ano + \"-\" + mes + \"-\" + dia\n              },\n              card: _objectSpread({}, prevDataSale.customer.card, {\n                number: cardForm.number.replace(/\\s+/g, ''),\n                name: cardForm.name,\n                valid: cardForm.validade,\n                cvv: cardForm.cvv\n              }),\n              financeResponsible: _objectSpread({}, prevDataSale.customer.financeResponsible, {\n                document: cardForm.cpf\n              })\n            })\n          };\n        });\n        props.setStepCheckout(2);\n      } else {\n        setActiveForm(prevActiveStep => prevActiveStep + 1);\n        handleFieldActive(activeForm + 1);\n      }\n    }\n  };\n\n  React.useEffect(() => {\n    // props.setDataSale( prevDataSale => {\n    //   return {  \n    //     customer: {     \n    //     ...prevDataSale.customer,\n    //     card : {\n    //       ...prevDataSale.card,\n    //       ...cardField \n    //     }  \n    //     }         \n    //   }\n    // });    \n    console.log(cardField.number.replace(/\\s+/g, ''));\n  }, []);\n\n  const handleBack = type => {\n    if (activeForm !== 0) {\n      setActiveForm(prevActiveStep => prevActiveStep - 1);\n      handleFieldActive(activeForm - 1);\n    } else {\n      props.setStepCheckout(0);\n    }\n  };\n\n  const handleFocus = event => {\n    // event.target.select()\n    if (event.target.value == \"\") {\n      event.target.selectionStart = 0;\n      event.target.selectionEnd = 0;\n    } else {\n      event.target.select();\n    }\n  };\n\n  const handleFieldActive = step => {\n    console.log(\"handleFieldActive\");\n\n    switch (step) {\n      case 0:\n        setActiveField([\"id\", \"number\", \"name\", \"validade\", \"cvv\", \"cpf\"]);\n        break;\n\n      case 1:\n        setActiveField([\"nome\", \"email\", \"telefone\", \"dataNascimento\"]);\n        break;\n\n      case 2:\n        setActiveField([\"cep\", \"endereco\", \"numero\", \"complemento\", \"bairro\", \"estado\", \"cidade\"]);\n        break;\n\n      default:\n        setActiveField([\"id\", \"number\", \"name\", \"validade\", \"cvv\"]);\n        break;\n    }\n\n    console.log(step); // console.log(activeField);\n  };\n\n  const [payment, setPayment] = React.useState({\n    \"paymentMethod\": \"creditCard\",\n    \"card\": {\n      \"id\": 123456,\n      \"number\": \"5464082622239784\",\n      \"name\": \"nome no cartão\",\n      \"valid\": \"12/20\",\n      \"cvv\": \"782\"\n    }\n  });\n\n  const fetchData = async event => {\n    setError(false);\n    let cep = event.target.value;\n    setPayment(prevPayment => {\n      return _objectSpread({}, prevPayment, {\n        endereco: \"\",\n        bairro: \"\",\n        estado: \"\",\n        cidade: \"\"\n      });\n    });\n    await axios.get(`https://viacep.com.br/ws/${cep}/json/`).then(res => {\n      // setError(false);\n      // setUsers(prevState => [...prevState, ...res.data]);\n      // setUser(res.data);\n      // console.log(res.data);\n      if (res.data.error) {\n        setError(true);\n        return;\n      }\n\n      setPayment(prevPayment => {\n        return _objectSpread({}, prevPayment, {\n          cep: res.data.cep,\n          endereco: res.data.logradouro,\n          bairro: res.data.bairro,\n          estado: res.data.uf,\n          cidade: res.data.localidade\n        });\n      }); // console.log(res.data.cliente);     \n    }).catch(error => {\n      console.log(error);\n      setError(true);\n    }).finally(() => {// setLoading(false);\n    });\n  };\n\n  const handlerOnBlur = event => {\n    let brandCard = getCardFlag(event.target.value); // handleFocus(event);\n\n    switch (brandCard) {\n      case \"visa\":\n        setActiveCard(visa);\n        break;\n\n      case \"mastercard\":\n        setActiveCard(mastercard);\n        break;\n\n      case \"diners\":\n        setActiveCard(diners);\n        break;\n\n      case \"amex\":\n        setActiveCard(amex);\n        break;\n\n      case \"discover\":\n        setActiveCard(discover);\n        break;\n\n      case \"hipercard\":\n        setActiveCard(hipercard);\n        break;\n\n      case \"elo\":\n        setActiveCard(elo);\n        break;\n\n      case \"jcb\":\n        setActiveCard(jcb);\n        break;\n\n      case \"aura\":\n        setActiveCard(aura);\n        break;\n\n      default:\n        setActiveCard(nocard);\n        break;\n    }\n\n    setCardField({\n      number: getValues(\"number\"),\n      name: getValues(\"name\"),\n      valid: getValues(\"validade\"),\n      cvv: getValues(\"cvv\")\n    });\n  };\n\n  const handlerOnChange = event => {\n    setCardField({\n      number: getValues(\"number\"),\n      name: getValues(\"name\"),\n      valid: getValues(\"validade\"),\n      cvv: getValues(\"cvv\")\n    });\n  };\n\n  const getCardFlag = cardnumber => {\n    var cardnumber = cardnumber.replace(/[^0-9]+/g, '');\n    var cards = {\n      visa: /^4[0-9]{12}(?:[0-9]{3})/,\n      mastercard: /^5[1-5][0-9]{14}/,\n      diners: /^3(?:0[0-5]|[68][0-9])[0-9]{11}/,\n      amex: /^3[47][0-9]{13}/,\n      discover: /^6(?:011|5[0-9]{2})[0-9]{12}/,\n      hipercard: /^(606282\\d{10}(\\d{3})?)|(3841\\d{15})/,\n      elo: /^((((636368)|(438935)|(504175)|(451416)|(636297))\\d{0,10})|((5067)|(4576)|(4011))\\d{0,12})/,\n      jcb: /^(?:2131|1800|35\\d{3})\\d{11}/,\n      aura: /^(5078\\d{2})(\\d{2})(\\d{11})$/\n    };\n\n    for (var flag in cards) {\n      if (cards[flag].test(cardnumber)) {\n        return flag;\n      }\n    }\n\n    return nocard;\n  };\n\n  const classes = useStyles();\n  return __jsx(\"div\", {\n    className: \"cd-section\"\n  }, __jsx(\"div\", {\n    className: classes.contacts + \" \" + classes.section // style={{ backgroundImage: `url(${city})` }}\n    ,\n    style: {\n      backgroundColor: \"#ffffff\"\n    }\n  }, __jsx(\"div\", {\n    className: classes.container\n  }, __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(Box, {\n    clone: true,\n    order: {\n      xs: 2,\n      sm: 2,\n      md: 1\n    }\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 5\n  }, __jsx(Grow, _extends({\n    in: true,\n    style: {\n      transformOrigin: '0 0 0'\n    }\n  }, true ? {\n    timeout: 1000\n  } : {}), __jsx(Card, {\n    className: classes.card1\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(CardHeader, {\n    contact: true,\n    color: \"primary\",\n    className: classes.textCenter\n  }, __jsx(\"h4\", {\n    className: classes.cardTitle\n  }, \"Pagamento\")), __jsx(Grow, _extends({\n    in: activeForm === 0,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 0 ? \"block\" : \"none\"\n    }\n  }, activeForm === 0 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(Card, {\n    color: \"info\",\n    className: classes.containerCart\n  }, __jsx(CardBody, {\n    color: true,\n    className: classes.noPaddingBottom\n  }, __jsx(\"h5\", {\n    className: classes.cardCategorySocialWhite\n  }, __jsx(\"img\", {\n    src: chipCard\n  })), __jsx(\"h4\", {\n    className: classes.cardTitleWhite\n  }, cardField.number), __jsx(\"h4\", {\n    className: classes.cardTitleWhite\n  }, cardField.name)), __jsx(CardFooter, null, __jsx(\"div\", null, __jsx(\"a\", {\n    href: \"#pablo\",\n    onClick: e => e.preventDefault()\n  }, __jsx(\"span\", null, \"Valid\"), \" \", cardField.valid, \" \\xA0 \\xA0\", __jsx(\"span\", null, \"CVV\"), \" \", cardField.cvv)), __jsx(\"div\", {\n    className: classes.statsWhite + \" \" + classes.mlAuto\n  }, __jsx(\"img\", {\n    src: activeCard\n  })))), __jsx(GridContainer, {\n    justify: \"center\",\n    className: classes.containerFieldsCard\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12\n  }, __jsx(CustomInput, {\n    labelText: \"N\\xFAmero do cart\\xE3o *\",\n    labelError: errors.number && errors.number.message,\n    error: errors.number ? true : false,\n    id: \"number\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      type: \"tel\",\n      name: \"number\",\n      inputRef: register,\n      onClick: handleFocus,\n      inputComponent: CardMask,\n      onBlur: handlerOnBlur // startAdornment: (\n      //   <InputAdornment position=\"start\">\n      //     <AssignmentInd className={classes.inputIconsColor} />\n      //   </InputAdornment>\n      // )                           \n\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12\n  }, __jsx(CustomInput, {\n    labelText: \"Nome impresso no cart\\xE3o\",\n    labelError: errors.name && errors.name.message,\n    error: errors.name ? true : false,\n    id: \"name\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"name\",\n      inputRef: register,\n      onChange: handlerOnChange\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 6\n  }, __jsx(CustomInput, {\n    labelText: \"Validade (MM/AA)\",\n    labelError: errors.validade && errors.validade.message,\n    error: errors.validade ? true : false,\n    id: \"validade\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      type: \"tel\",\n      name: \"validade\",\n      inputRef: register,\n      onClick: handleFocus,\n      inputComponent: ValidadeMask,\n      onChange: handlerOnChange\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 6\n  }, __jsx(CustomInput, {\n    labelText: \"CVV\",\n    labelError: errors.cvv && errors.cvv.message,\n    error: errors.cvv ? true : false,\n    id: \"cvv\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      type: \"tel\",\n      name: \"cvv\",\n      inputRef: register,\n      onClick: handleFocus,\n      inputComponent: CVVMask,\n      onChange: handlerOnChange\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12\n  }, __jsx(CustomInput, {\n    labelText: \"CPF do titular do cart\\xE3o\",\n    labelError: errors.cpf && errors.cpf.message,\n    error: errors.cpf ? true : false,\n    id: \"cpf\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"cpf\",\n      inputRef: register,\n      inputComponent: TextMaskCustom\n    }\n  }))))), __jsx(CardFooter, {\n    className: classes.textCenter\n  }, __jsx(GridContainer, {\n    justify: \"center\",\n    style: {\n      margin: \"0\",\n      width: \"100%\"\n    }\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12\n  }, __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: handleNext\n  }, \"Pr\\xF3ximo\")), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12\n  }, __jsx(Button, {\n    simple: true,\n    color: \"primary\",\n    fullWidth: true,\n    onClick: handleBack\n  }, \"Voltar\"))))))))), __jsx(Box, {\n    clone: true,\n    order: {\n      xs: 1,\n      sm: 1,\n      md: 2\n    }\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 4\n  }, __jsx(Grow, _extends({\n    in: true,\n    style: {\n      transformOrigin: '0 0 0'\n    }\n  }, true ? {\n    timeout: 1000\n  } : {}), __jsx(Card, {\n    className: classes.card1\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(CardHeader, {\n    contact: true,\n    color: \"primary\",\n    className: classes.textCenter\n  }, __jsx(\"h4\", {\n    className: classes.cardTitle\n  }, \"Resumo\")), __jsx(Grow, _extends({\n    in: activeForm === 0,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 0 ? \"block\" : \"none\"\n    }\n  }, activeForm === 0 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12\n  }, __jsx(Card, {\n    pricing: true,\n    plain: true,\n    className: classes.marginZero\n  }, __jsx(CardBody, {\n    pricing: true,\n    plain: true\n  }, __jsx(\"h5\", {\n    className: classes.cardCategory,\n    style: {\n      color: \"#425cc7\"\n    }\n  }, \"Plano Anual Start\"), __jsx(\"hr\", null), __jsx(\"small\", {\n    style: {\n      fontSize: \"1rem\"\n    }\n  }, '\\u00A0', \" 12 parcelas mensais de\"), __jsx(\"h1\", {\n    className: classes.cardTitle,\n    style: {\n      color: \"#425cc7\",\n      marginTop: \"0.75rem\",\n      marginBottom: \"0 !important\"\n    }\n  }, __jsx(\"small\", {\n    style: {\n      color: \"#425cc7\"\n    }\n  }, \"R$\"), \" 39,90\"), __jsx(\"small\", {\n    style: {\n      fontSize: \"0.7rem\"\n    }\n  }, '\\u00A0', \" Valor anual do plano: R$ 478,80\"), __jsx(\"ul\", {\n    className: classes.itensResumo\n  }, __jsx(\"li\", null, __jsx(Check, null), \" Treinos Personalizados\"), __jsx(\"li\", null, __jsx(Check, null), \" Acompanhamento em Grupo\"), __jsx(\"li\", null, __jsx(Check, null), \" V\\xEDdeos Explicativos por Exerc\\xEDcio\"), __jsx(\"li\", null, __jsx(Check, null), \" Master Classes Ao Vivo 1x/semana\")))))))))))))))));\n}","map":null,"metadata":{},"sourceType":"module"}
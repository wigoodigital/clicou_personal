{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport axios from 'axios'; // react components used to create a google map\n\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\"; // @material-ui/icons\n\nimport PinDrop from \"@material-ui/icons/PinDrop\";\nimport Phone from \"@material-ui/icons/Phone\";\nimport Check from \"@material-ui/icons/Check\";\nimport Email from \"@material-ui/icons/Email\";\nimport EventIcon from '@material-ui/icons/Event';\nimport Favorite from \"@material-ui/icons/Favorite\";\nimport AssignmentInd from \"@material-ui/icons/AssignmentInd\"; // core components\n\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport InfoArea from \"components/InfoArea/InfoArea.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport CardFooter from \"components/Card/CardFooter.js\";\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport SnackbarContent from \"components/Snackbar/SnackbarContent.js\";\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Grow from '@material-ui/core/Grow';\nimport FieldsCpf from \"pages-sections/checkout/identification/FieldsCpf.js\";\nimport FieldsPersonalData from \"pages-sections/checkout/identification/FieldsPersonalData.js\";\nimport InputMask from \"react-input-mask\";\nimport MaskedInput from 'react-text-mask';\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from '@hookform/resolvers';\nimport * as yup from \"yup\";\nimport { setLocale } from 'yup';\nimport TagManager from 'react-gtm-module';\nimport checkoutStyle from \"assets/jss/nextjs-material-kit-pro/pages/checkoutSections/checkoutStyle.js\";\nimport city from \"assets/img/examples/city.jpg\";\nconst useStyles = makeStyles(checkoutStyle);\n\nfunction TextMaskCustom(props) {\n  const {\n    inputRef\n  } = props,\n        other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return __jsx(MaskedInput, _extends({}, other, {\n    ref: ref => {\n      inputRef(ref ? ref.inputElement : null);\n    },\n    mask: [/[0-9]/, /[0-9]/, /[0-9]/, '.', /[0-9]/, /[0-9]/, /[0-9]/, '.', /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/],\n    placeholderChar: '\\u2007',\n    guide: false,\n    showMask: true\n  }));\n}\n\nfunction PhoneMask(props) {\n  const {\n    inputRef\n  } = props,\n        other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return __jsx(MaskedInput, _extends({}, other, {\n    ref: ref => {\n      inputRef(ref ? ref.inputElement : null);\n    },\n    mask: ['(', /[1-9]/, /[0-9]/, ')', ' ', /[1-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/],\n    placeholderChar: '\\u2000',\n    guide: false,\n    showMask: true\n  }));\n}\n\nfunction DateMask(props) {\n  const {\n    inputRef\n  } = props,\n        other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return __jsx(MaskedInput, _extends({}, other, {\n    ref: ref => {\n      inputRef(ref ? ref.inputElement : null);\n    } // mask={['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]}\n    ,\n    mask: [/\\d/, /\\d/, '/', /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/],\n    placeholderChar: '\\u2000',\n    guide: false,\n    showMask: true\n  }));\n}\n\nfunction CEPMask(props) {\n  const {\n    inputRef\n  } = props,\n        other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return __jsx(MaskedInput, _extends({}, other, {\n    ref: ref => {\n      inputRef(ref ? ref.inputElement : null);\n    } // mask={['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]}\n    ,\n    mask: [/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, /[0-9]/],\n    placeholderChar: '\\u2000',\n    guide: false,\n    showMask: true\n  }));\n}\n\nsetLocale({\n  mixed: {\n    notType: function notType(_ref) {\n      switch (_ref.type) {\n        case 'number':\n          return 'deve ser um número';\n\n        case 'string':\n          return 'deve ser um texto';\n\n        default:\n          return 'formato errado';\n      }\n    },\n    default: 'é inválido',\n    required: 'Desculpe, este campo é obrigatório',\n    oneOf: 'deve ser um dos seguintes valores: ${values}',\n    notOneOf: 'não pode ser um dos seguintes valores: ${values}'\n  },\n  string: {\n    length: 'deve ter exatamente ${length} caracteres',\n    min: 'deve ter pelo menos ${min} caracteres',\n    max: 'deve ter no máximo ${max} caracteres',\n    email: 'Por favor, informe um e-mail inválido',\n    url: 'deve ter um formato de URL válida',\n    trim: 'não deve conter espaços no início ou no fim.',\n    lowercase: 'deve estar em maiúsculo',\n    uppercase: 'deve estar em minúsculo'\n  },\n  number: {\n    min: 'deve ser no mínimo ${min}',\n    max: 'deve ser no máximo ${max}',\n    lessThan: 'deve ser menor que ${less}',\n    moreThan: 'deve ser maior que ${more}',\n    notEqual: 'não pode ser igual à ${notEqual}',\n    positive: 'deve ser um número posítivo',\n    negative: 'deve ser um número negativo',\n    integer: 'deve ser um número inteiro'\n  },\n  date: {\n    min: 'deve ser maior que a data ${min}',\n    max: 'deve ser menor que a data ${max}'\n  },\n  array: {\n    min: 'deve ter no mínimo ${min} itens',\n    max: 'deve ter no máximo ${max} itens'\n  }\n});\nconst regexCPF = /([0-9]{2}[\\.]?[0-9]{3}[\\.]?[0-9]{3}[\\/]?[0-9]{4}[-]?[0-9]{2})|([0-9]{3}[\\.]?[0-9]{3}[\\.]?[0-9]{3}[-]?[0-9]{2})/gm;\n\nfunction cpfValidate(cpf) {\n  console.log(\"Validatring\", cpf);\n  return cpf.length > 10;\n}\n\nfunction isValidCPF(cpf) {\n  if (typeof cpf !== \"string\") return false;\n  cpf = cpf.replace(/[\\s.-]*/igm, '');\n\n  if (!cpf || cpf.length != 11 || cpf == \"00000000000\" || cpf == \"11111111111\" || cpf == \"22222222222\" || cpf == \"33333333333\" || cpf == \"44444444444\" || cpf == \"55555555555\" || cpf == \"66666666666\" || cpf == \"77777777777\" || cpf == \"88888888888\" || cpf == \"99999999999\") {\n    return false;\n  }\n\n  var soma = 0;\n  var resto;\n\n  for (var i = 1; i <= 9; i++) soma = soma + parseInt(cpf.substring(i - 1, i)) * (11 - i);\n\n  resto = soma * 10 % 11;\n  if (resto == 10 || resto == 11) resto = 0;\n  if (resto != parseInt(cpf.substring(9, 10))) return false;\n  soma = 0;\n\n  for (var i = 1; i <= 10; i++) soma = soma + parseInt(cpf.substring(i - 1, i)) * (12 - i);\n\n  resto = soma * 10 % 11;\n  if (resto == 10 || resto == 11) resto = 0;\n  if (resto != parseInt(cpf.substring(10, 11))) return false;\n  return true;\n}\n\nfunction isValidPhone(phone) {\n  return /^(?:(?:\\+|00)?(55)\\s?)?(?:\\(?([1-9][0-9])\\)?\\s?)?(?:((?:9\\d|[2-9])\\d{3})\\-?(\\d{4}))$/.test(phone);\n}\n\nfunction isValidDate(dateString) {\n  // return /^((((0?[1-9]|[12]\\d|3[01])[\\.\\-\\/](0?[13578]|1[02])      [\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|((0?[1-9]|[12]\\d|30)[\\.\\-\\/](0?[13456789]|1[012])[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|((0?[1-9]|1\\d|2[0-8])[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|(29[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00)))|(((0[1-9]|[12]\\d|3[01])(0[13578]|1[02])((1[6-9]|[2-9]\\d)?\\d{2}))|((0[1-9]|[12]\\d|30)(0[13456789]|1[012])((1[6-9]|[2-9]\\d)?\\d{2}))|((0[1-9]|1\\d|2[0-8])02((1[6-9]|[2-9]\\d)?\\d{2}))|(2902((1[6-9]|[2-9]\\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00))))$/.test(date);\n  // First check for the pattern\n  if (!/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(dateString)) return false; // Parse the date parts to integers\n\n  var parts = dateString.split(\"/\");\n  var day = parseInt(parts[0], 10);\n  var month = parseInt(parts[1], 10);\n  var year = parseInt(parts[2], 10); // Check the ranges of month and year\n\n  if (year < 1000 || year > 3000 || month == 0 || month > 12) return false;\n  var monthLength = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // Adjust for leap years\n\n  if (year % 400 == 0 || year % 100 != 0 && year % 4 == 0) monthLength[1] = 29; // Check the range of the day\n\n  return day > 0 && day <= monthLength[month - 1];\n}\n\nyup.addMethod(yup.string, \"cpf\", function (message) {\n  // return yup.mixed().test(\"cpf\", message || \"número de CPF inválido\", value => cpfValidate(value));\n  return yup.mixed().test(\"cpf\", message || \"número de CPF inválido\", value => isValidCPF(value));\n});\nyup.addMethod(yup.string, \"phone\", function (message) {\n  return yup.mixed().test(\"phone\", message || \"número de celular inválido\", value => isValidPhone(value));\n});\nyup.addMethod(yup.string, \"date\", function (message) {\n  return yup.mixed().test(\"date\", message || \"data inválida\", value => isValidDate(value));\n});\nconst SignupSchema = yup.object().shape({\n  cpf: yup.string().cpf(\"Por favor, informe um CPF válido\"),\n  nome: yup.string().required(),\n  email: yup.string().required().email(),\n  confirmEmail: yup.string().oneOf([yup.ref('email'), null], \"Email divergente ao inserido acima\"),\n  telefone: yup.string().phone(\"Por favor, informe um número de celular válido\"),\n  confirmTelefone: yup.string().oneOf([yup.ref('telefone'), null], \"Celular divergente ao inserido acima\"),\n  dataNascimento: yup.string().date(\"Por favor, informe uma data válida\"),\n  optinSms: yup.bool().oneOf([true], 'Esta opção é obrigatória'),\n  optinEmail: yup.bool().oneOf([true], 'Esta opção é obrigatória'),\n  optinTelegram: yup.bool().oneOf([true], 'Esta opção é obrigatória'),\n  aceiteTermos: yup.bool().oneOf([true], 'O aceite dos termos é obrigatório'),\n  cep: yup.string().required(),\n  endereco: yup.string().required(),\n  numero: yup.number().required(),\n  complemento: yup.string(),\n  bairro: yup.string().required(),\n  estado: yup.string().required(),\n  cidade: yup.string().required() // receberContatoEmail: yup.boolean().oneOf([true],'aceite obrigatório'),\n  // receberContatoSMS: yup.boolean().oneOf([true],'aceite obrigatório'),\n  // receberContatoWhatsApp: yup.boolean().oneOf([true],'aceite obrigatório')\n\n});\nexport default function SectionIdentification(props) {\n  // const { register, errors, handleSubmit} = useForm({\n  //   validationSchema: SignupSchema\n  // });\n  const {\n    register,\n    trigger,\n    handleSubmit,\n    getValues,\n    errors\n  } = useForm({\n    resolver: yupResolver(SignupSchema),\n    mode: \"onBlur\" // mode: \"onChange\"\n\n  });\n\n  const onSubmit = data => {\n    console.log(data); // alert(JSON.stringify(data, null));\n  };\n\n  useEffect(() => {\n    // history.pushState({}, null, \"/checkout/identification\");\n    TagManager.dataLayer({\n      dataLayer: {\n        event: \"identificationView\",\n        userId: '001',\n        userProject: 'project',\n        page: 'home'\n      }\n    });\n    TagManager.dataLayer({\n      dataLayer: {\n        'event': 'checkout',\n        'ecommerce': {\n          'checkout': {\n            'actionField': {\n              'step': 1\n            },\n            'products': [{\n              'name': 'Plano Anual Start',\n              'id': '1',\n              'price': '478.80',\n              'brand': 'Clicou Personal',\n              'category': 'Atendimento online',\n              'quantity': 1\n            }]\n          }\n        }\n      }\n    });\n  }, []);\n  const [checked, setChecked] = React.useState([]);\n\n  const handleToggle = value => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const [isAluno, setIsAluno] = React.useState(false);\n  const [activeForm, setActiveForm] = React.useState(0);\n  const [activeField, setActiveField] = React.useState(\"cpf\");\n  const [isDisableNext, setIsDisableNext] = React.useState(true);\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n\n  const handleNext = async type => {\n    console.log(activeField);\n    const result = await trigger(activeField);\n    console.log(result);\n    const identificationForm = getValues();\n\n    if (result) {\n      console.log(getValues());\n\n      if (activeForm == 2) {\n        const dataNascimentoSplit = identificationForm.dataNascimento.split(\"/\");\n        props.setDataSale(prevDataSale => {\n          return {\n            customer: _objectSpread({}, prevDataSale.customer, {\n              name: identificationForm.nome.toUpperCase(),\n              birthDate: dataNascimentoSplit[2] + \"-\" + dataNascimentoSplit[1] + \"-\" + dataNascimentoSplit[0],\n              email: identificationForm.email,\n              document: identificationForm.cpf.replace(/[^\\d]+/g, ''),\n              phones: [{\n                type: \"cellphone\",\n                number: identificationForm.telefone\n              }],\n              address: {\n                address: identificationForm.endereco,\n                number: identificationForm.numero,\n                complement: identificationForm.complemento,\n                district: identificationForm.bairro,\n                city: identificationForm.cidade,\n                state: identificationForm.estado,\n                postalCode: identificationForm.cep\n              },\n              financeResponsible: {\n                name: identificationForm.nome,\n                document: identificationForm.cpf,\n                email: identificationForm.email,\n                phone: identificationForm.telefone,\n                active: true\n              },\n              anamnese: _objectSpread({}, prevDataSale.customer.anamnese, {\n                optinSms: identificationForm.optinSms,\n                optinEmail: identificationForm.optinEmail,\n                optinTelegram: identificationForm.optinTelegram,\n                aceiteTermos: identificationForm.aceiteTermos\n              })\n            })\n          };\n        });\n        props.setStepCheckout(1);\n      } else {\n        setActiveForm(prevActiveStep => prevActiveStep + 1);\n        handleFieldActive(activeForm + 1);\n      }\n    }\n  };\n\n  const handleBack = type => {\n    if (activeForm !== 0) {\n      setActiveForm(prevActiveStep => prevActiveStep - 1);\n      handleFieldActive(activeForm - 1);\n    }\n  };\n\n  const handleFocus = event => {\n    if (event.target.value == \"\") {\n      event.target.selectionStart = 0;\n      event.target.selectionEnd = 0;\n    } else {\n      event.target.select();\n    }\n  };\n\n  const handleFieldActive = step => {\n    console.log(\"handleFieldActive\");\n\n    switch (step) {\n      case 0:\n        // setActiveField(\"first\");\n        setActiveField(\"cpf\");\n        break;\n\n      case 1:\n        setActiveField([\"nome\", \"email\", \"confirmEmail\", \"telefone\", \"confirmTelefone\", \"dataNascimento\", \"optinSms\", \"optinEmail\", \"optinTelegram\", \"aceiteTermos\"]);\n        break;\n\n      case 2:\n        setActiveField([\"cep\", \"endereco\", \"numero\", \"complemento\", \"bairro\", \"estado\", \"cidade\"]);\n        break;\n\n      default:\n        setActiveField(\"cpf\");\n        break;\n    }\n\n    console.log(step); // console.log(activeField);\n  };\n\n  const [identification, setIdentification] = React.useState({\n    cpf: \"\",\n    nome: \"\",\n    email: \"\",\n    telefone: \"\",\n    dataNascimento: \"\",\n    cep: \"\",\n    endereco: \"\",\n    numero: \"\",\n    complemento: \"\",\n    bairro: \"\",\n    estado: \"\",\n    cidade: \"\",\n    receberContatoEmail: \"\",\n    receberContatoSMS: \"\",\n    receberContatoWhatsApp: \"\"\n  });\n\n  const fetchData = async event => {\n    setError(false);\n    let cep = event.target.value;\n    setIdentification(prevIdentification => {\n      return _objectSpread({}, prevIdentification, {\n        endereco: \"\",\n        bairro: \"\",\n        estado: \"\",\n        cidade: \"\"\n      });\n    });\n    await axios.get(`https://viacep.com.br/ws/${cep}/json/`).then(res => {\n      if (res.data.error) {\n        setError(true);\n        return;\n      }\n\n      setIdentification(prevIdentification => {\n        return _objectSpread({}, prevIdentification, {\n          cep: res.data.cep,\n          endereco: res.data.logradouro,\n          bairro: res.data.bairro,\n          estado: res.data.uf,\n          cidade: res.data.localidade\n        });\n      }); // console.log(res.data.cliente);     \n    }).catch(error => {\n      console.log(error);\n      setError(true);\n    }).finally(() => {// setLoading(false);\n    });\n  };\n\n  const classes = useStyles();\n  return __jsx(\"div\", {\n    className: \"cd-section\"\n  }, __jsx(\"div\", {\n    className: classes.contacts + \" \" + classes.section // style={{ backgroundImage: `url(${city})` }}\n    // style={{ backgroundColor: \"#ffffff\" }}\n\n  }, __jsx(\"div\", {\n    className: classes.container\n  }, __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(Grow, _extends({\n    in: activeForm === 0 || activeForm === 2,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 0 || activeForm === 2 ? \"block\" : \"none\"\n    }\n  }, activeForm === 0 || activeForm === 2 ? {\n    timeout: 1000\n  } : {}), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 5\n  }, __jsx(Grow, _extends({\n    in: true,\n    style: {\n      transformOrigin: '0 0 0'\n    }\n  }, true ? {\n    timeout: 1000\n  } : {}), __jsx(Card, {\n    className: classes.card1\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(CardHeader, {\n    contact: true,\n    color: \"primary\",\n    className: classes.textCenter\n  }, __jsx(\"h4\", {\n    className: classes.cardTitle\n  }, \"Identifica\\xE7\\xE3o\")), __jsx(Grow, _extends({\n    in: activeForm === 0,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 0 ? \"block\" : \"none\"\n    }\n  }, activeForm === 0 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 8,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"CPF\",\n    labelError: errors.cpf && errors.cpf.message,\n    id: \"cpf\",\n    error: errors.cpf ? true : false,\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      type: \"tel\",\n      name: \"cpf\",\n      inputRef: register,\n      onClick: handleFocus,\n      onBlur: handleFocus,\n      inputComponent: TextMaskCustom,\n      startAdornment: __jsx(InputAdornment, {\n        position: \"start\"\n      }, __jsx(AssignmentInd, {\n        className: classes.inputIconsColor\n      }))\n    }\n  }))))), __jsx(Grow, _extends({\n    in: activeForm === 2,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 2 ? \"block\" : \"none\"\n    }\n  }, activeForm === 2 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, error && __jsx(SnackbarContent, {\n    message: __jsx(\"span\", null, __jsx(\"b\", null, \"N\\xE3o encontramos seu CEP\"), \" \", __jsx(\"br\", null), \" Tente novamente\") // close\n    ,\n    color: \"warning\",\n    icon: \"info_outline\"\n  }), __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 4\n  }, __jsx(CustomInput, {\n    labelText: \"CEP\",\n    labelError: errors.cep && errors.cep.message,\n    error: errors.cep ? true : false,\n    id: \"cep\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      type: \"tel\",\n      name: \"cep\",\n      inputComponent: CEPMask,\n      onClick: handleFocus,\n      inputRef: register,\n      onBlur: fetchData\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Endere\\xE7o\",\n    labelError: errors.endereco && errors.endereco.message,\n    error: errors.endereco ? true : false,\n    id: \"endereco\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"endereco\",\n      inputRef: register,\n      value: identification.endereco,\n      disabled: true\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 4\n  }, __jsx(CustomInput, {\n    labelText: \"N\\xFAmero\",\n    labelError: errors.numero && errors.numero.message,\n    error: errors.numero ? true : false,\n    id: \"numero\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      type: \"tel\",\n      name: \"numero\",\n      inputRef: register\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(CustomInput, {\n    labelText: \"Complemento\",\n    labelError: errors.complemento && errors.complemento.message,\n    error: errors.complemento ? true : false,\n    id: \"complemento\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"complemento\",\n      inputRef: register\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 5\n  }, __jsx(CustomInput, {\n    labelText: \"Bairro\",\n    labelError: errors.bairro && errors.bairro.message,\n    error: errors.bairro ? true : false,\n    id: \"bairro\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"bairro\",\n      inputRef: register,\n      value: identification.bairro,\n      disabled: true\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 3\n  }, __jsx(CustomInput, {\n    labelText: \"Estado\",\n    labelError: errors.estado && errors.estado.message,\n    error: errors.estado ? true : false,\n    id: \"estado\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"estado\",\n      inputRef: register,\n      value: identification.estado,\n      disabled: true\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 4\n  }, __jsx(CustomInput, {\n    labelText: \"Cidade\",\n    labelError: errors.cidade && errors.cidade.message,\n    error: errors.cidade ? true : false,\n    id: \"cidade\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"cidade\",\n      inputRef: register,\n      value: identification.cidade,\n      disabled: true\n    }\n  }))))), __jsx(CardFooter, null, __jsx(GridContainer, {\n    justify: \"center\",\n    style: {\n      margin: \"0\",\n      width: \"100%\"\n    }\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12\n  }, __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: handleNext\n  }, \"Pr\\xF3ximo\")), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12\n  }, __jsx(Button, {\n    simple: true,\n    color: \"primary\",\n    fullWidth: true,\n    onClick: handleBack\n  }, \"Voltar\"))))))))), __jsx(Grow, _extends({\n    in: activeForm === 1,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 1 ? \"block\" : \"none\"\n    }\n  }, activeForm === 1 ? {\n    timeout: 1000\n  } : {}), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 6\n  }, __jsx(Grow, _extends({\n    in: true,\n    style: {\n      transformOrigin: '0 0 0'\n    }\n  }, true ? {\n    timeout: 1000\n  } : {}), __jsx(Card, {\n    className: classes.card1\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(CardHeader, {\n    contact: true,\n    color: \"primary\",\n    className: classes.textCenter\n  }, __jsx(\"h4\", {\n    className: classes.cardTitle\n  }, \"Identifica\\xE7\\xE3o\")), __jsx(Grow, _extends({\n    in: activeForm === 1,\n    style: {\n      transformOrigin: '0 0 0',\n      display: activeForm === 1 ? \"block\" : \"none\"\n    }\n  }, activeForm === 1 ? {\n    timeout: 1000\n  } : {}), __jsx(CardBody, null, __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 8,\n    md: 5\n  }, __jsx(CustomInput, {\n    labelText: \"Nome\",\n    labelError: errors.nome && errors.nome.message,\n    error: errors.nome ? true : false,\n    id: \"nome\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"nome\",\n      inputRef: register,\n      startAdornment: __jsx(InputAdornment, {\n        position: \"start\"\n      }, __jsx(AssignmentInd, {\n        className: classes.inputIconsColor\n      }))\n    }\n  }), __jsx(CustomInput, {\n    labelText: \"Email\",\n    labelError: errors.email && errors.email.message,\n    error: errors.email ? true : false,\n    id: \"email\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"email\",\n      inputRef: register,\n      startAdornment: __jsx(InputAdornment, {\n        position: \"start\"\n      }, __jsx(Email, {\n        className: classes.inputIconsColor\n      }))\n    }\n  }), __jsx(CustomInput, {\n    labelText: \"Confirmar Email\",\n    labelError: errors.confirmEmail && errors.confirmEmail.message,\n    error: errors.confirmEmail ? true : false,\n    id: \"confirmEmail\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"confirmEmail\",\n      inputRef: register,\n      startAdornment: __jsx(InputAdornment, {\n        position: \"start\"\n      }, __jsx(Email, {\n        className: classes.inputIconsColor\n      }))\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 8,\n    md: 5\n  }, __jsx(CustomInput, {\n    labelText: \"Celular\",\n    labelError: errors.telefone && errors.telefone.message,\n    error: errors.telefone ? true : false,\n    id: \"telefone\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      type: \"tel\",\n      name: \"telefone\",\n      inputRef: register,\n      onClick: handleFocus,\n      // onBlur: handleFocus,\n      inputComponent: PhoneMask,\n      startAdornment: __jsx(InputAdornment, {\n        position: \"start\"\n      }, __jsx(Phone, {\n        className: classes.inputIconsColor\n      }))\n    }\n  }), __jsx(CustomInput, {\n    labelText: \"Confirmar Celular\",\n    labelError: errors.confirmTelefone && errors.confirmTelefone.message,\n    error: errors.confirmTelefone ? true : false,\n    id: \"confirmTelefone\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      type: \"tel\",\n      name: \"confirmTelefone\",\n      inputRef: register,\n      onClick: handleFocus,\n      // onBlur: handleFocus,\n      inputComponent: PhoneMask,\n      startAdornment: __jsx(InputAdornment, {\n        position: \"start\"\n      }, __jsx(Phone, {\n        className: classes.inputIconsColor\n      }))\n    }\n  }), __jsx(CustomInput, {\n    labelText: \"Data de nascimento\",\n    labelError: errors.dataNascimento && errors.dataNascimento.message,\n    error: errors.dataNascimento ? true : false,\n    id: \"dataNascimento\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      name: \"dataNascimento\",\n      type: \"tel\",\n      inputRef: register,\n      onClick: handleFocus,\n      // onBlur: handleFocus,\n      inputComponent: DateMask,\n      startAdornment: __jsx(InputAdornment, {\n        position: \"start\"\n      }, __jsx(EventIcon, {\n        className: classes.inputIconsColor\n      }))\n    }\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12\n  }, __jsx(\"label\", null, \"Aceito receber contatos via:\"), __jsx(\"br\", null), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      defaultChecked: true,\n      tabIndex: -1,\n      onClick: () => handleToggle(1),\n      checkedIcon: __jsx(Check, {\n        className: classes.checkedIcon\n      }),\n      icon: __jsx(Check, {\n        className: classes.uncheckedIcon\n      }),\n      classes: {\n        checked: classes.checked,\n        root: classes.checkRoot\n      },\n      name: \"optinEmail\",\n      inputRef: register\n    }),\n    classes: {\n      label: classes.label\n    },\n    label: \"Email\"\n  }), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      defaultChecked: true,\n      tabIndex: -1,\n      onClick: () => handleToggle(1),\n      checkedIcon: __jsx(Check, {\n        className: classes.checkedIcon\n      }),\n      icon: __jsx(Check, {\n        className: classes.uncheckedIcon\n      }),\n      classes: {\n        checked: classes.checked,\n        root: classes.checkRoot\n      },\n      name: \"optinSms\",\n      inputRef: register\n    }),\n    classes: {\n      label: classes.label\n    },\n    label: \"SMS\"\n  }), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      defaultChecked: true,\n      tabIndex: -1,\n      onClick: () => handleToggle(1),\n      checkedIcon: __jsx(Check, {\n        className: classes.checkedIcon\n      }),\n      icon: __jsx(Check, {\n        className: classes.uncheckedIcon\n      }),\n      classes: {\n        checked: classes.checked,\n        root: classes.checkRoot\n      },\n      name: \"optinTelegram\",\n      inputRef: register\n    }),\n    classes: {\n      label: classes.label\n    },\n    label: \"Telegram\"\n  }), (errors.optinSms || errors.optinEmail || errors.optinTelegram) && __jsx(FormHelperText, {\n    className: classes.marginAuto,\n    error: true\n  }, \"Estas op\\xE7\\xF5es s\\xE3o obrigat\\xF3rias\")), __jsx(GridItem, {\n    xs: 12,\n    sm: 8,\n    md: 8\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      tabIndex: -1,\n      onClick: () => handleToggle(1),\n      checkedIcon: __jsx(Check, {\n        className: classes.checkedIcon\n      }),\n      icon: __jsx(Check, {\n        className: classes.uncheckedIcon\n      }),\n      classes: {\n        checked: classes.checked,\n        root: classes.checkRoot\n      },\n      name: \"aceiteTermos\",\n      inputRef: register\n    }),\n    classes: {\n      label: classes.label\n    } // label=\"Li e aceito o Termo de Uso e Políticas de Privacidade.\"\n    ,\n    label: __jsx(React.Fragment, null, __jsx(\"div\", null, \"Li e aceito o\", __jsx(\"a\", {\n      href: \"../termos/Termo_de_Uso_e_Politica_de_Privacidade_Clicou_Personal.pdf\",\n      className: classes.colorPrimary,\n      target: \"_blank\"\n    }, \" Termo de Uso e Pol\\xEDticas de Privacidade.\")))\n  }), errors.aceiteTermos && __jsx(FormHelperText, {\n    className: classes.marginAuto,\n    error: true\n  }, errors.aceiteTermos.message))))), __jsx(CardFooter, null, __jsx(GridContainer, {\n    justify: \"center\",\n    style: {\n      margin: \"0\",\n      width: \"100%\"\n    }\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12\n  }, __jsx(Button, {\n    color: \"primary\",\n    fullWidth: true,\n    onClick: handleNext\n  }, \"Pr\\xF3ximo\")), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12\n  }, __jsx(Button, {\n    simple: true,\n    color: \"primary\",\n    fullWidth: true,\n    onClick: handleBack\n  }, \"Voltar\")))))))))))));\n}","map":null,"metadata":{},"sourceType":"module"}
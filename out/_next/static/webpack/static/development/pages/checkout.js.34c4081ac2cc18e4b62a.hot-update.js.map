{"version":3,"file":"static/webpack/static/development/pages/checkout.js.34c4081ac2cc18e4b62a.hot-update.js","sources":["webpack:///./pages-sections/checkout/SectionPayment.js"],"sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport axios from 'axios';\n// react components used to create a google map\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker\n} from \"react-google-maps\";\nimport TagManager from 'react-gtm-module';\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport Box from '@material-ui/core/Box';\n// @material-ui/icons\nimport PinDrop from \"@material-ui/icons/PinDrop\";\nimport Phone from \"@material-ui/icons/Phone\";\nimport Check from \"@material-ui/icons/Check\";\nimport Email from \"@material-ui/icons/Email\";\nimport EventIcon from '@material-ui/icons/Event';\nimport Favorite from \"@material-ui/icons/Favorite\";\nimport AssignmentInd from \"@material-ui/icons/AssignmentInd\";\n// core components\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport InfoArea from \"components/InfoArea/InfoArea.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport CardFooter from \"components/Card/CardFooter.js\";\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport SnackbarContent from \"components/Snackbar/SnackbarContent.js\";\nimport FormHelperText from '@material-ui/core/FormHelperText'; \n\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\n\nimport Grow from '@material-ui/core/Grow';\n\n\nimport InputMask from \"react-input-mask\";\nimport MaskedInput from 'react-text-mask';\nimport PropTypes from 'prop-types';\n\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from '@hookform/resolvers';\nimport * as yup from \"yup\";\nimport { setLocale } from 'yup';\n\nimport checkoutStyle from \"assets/jss/nextjs-material-kit-pro/pages/checkoutSections/checkoutStyle.js\";\n\nimport chipCard from \"assets/img/icon-cartoes/icon-chip.png\";\nimport visa from \"assets/img/icon-cartoes/icon-visa.png\";\nimport mastercard from \"assets/img/icon-cartoes/icon-master.png\";\nimport diners from \"assets/img/icon-cartoes/icon-diners.png\";\nimport amex from \"assets/img/icon-cartoes/icon-amex.png\";\nimport discover from \"assets/img/icon-cartoes/icon-discover.png\";\nimport hipercard from \"assets/img/icon-cartoes/icon-hipercard.png\";\nimport elo from \"assets/img/icon-cartoes/icon-elo.png\";\nimport jcb from \"assets/img/icon-cartoes/icon-jcb.png\";\nimport aura from \"assets/img/icon-cartoes/icon-aura.png\";\nimport nocard from \"assets/img/icon-cartoes/icon-nocard.png\";\n\nconst useStyles = makeStyles(checkoutStyle);\n\nfunction TextMaskCustom(props) {\n  const { inputRef, ...other } = props;\n\n  return (\n    <MaskedInput\n      {...other}\n      ref={(ref) => {\n        inputRef(ref ? ref.inputElement : null);\n      }}      \n      mask={[/[0-9]/, /[0-9]/, /[0-9]/, '.', /[0-9]/, /[0-9]/, /[0-9]/, '.', /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n      placeholderChar={'\\u2000'}\n      guide={false}\n      showMask\n    />\n  );\n}\n\nTextMaskCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n};\n\n\nfunction ValidadeMask(props) {\n  const { inputRef, ...other } = props;\n\n  return (\n    <MaskedInput\n      {...other}\n      ref={(ref) => {\n        inputRef(ref ? ref.inputElement : null);\n      }}      \n      mask={[/[0-9]/, /[0-9]/, '/', /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/]}\n      placeholderChar={'\\u2000'}\n      guide={false}\n      showMask\n    />\n  );\n}\n\nValidadeMask.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n};\n\nfunction CVVMask(props) {\n  const { inputRef, ...other } = props;\n\n  return (\n    <MaskedInput\n      {...other}\n      ref={(ref) => {\n        inputRef(ref ? ref.inputElement : null);\n      }}\n      // mask={['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]}\n      mask={[/[0-9]/, /[0-9]/, /[0-9]/]}\n      placeholderChar={'\\u2000'}\n      guide={false}\n      showMask\n    />\n  );\n}\n\nCVVMask.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n};\n\n\nfunction CardMask(props) {\n  const { inputRef, ...other } = props;\n\n  return (\n    <MaskedInput\n      {...other}\n      ref={(ref) => {\n        inputRef(ref ? ref.inputElement : null);\n      }}\n      // mask={['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]}\n      mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, ' ', /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, ' ', /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, ' ', /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/ ]}\n      placeholderChar={'\\u2000'}\n      guide={false}\n      showMask\n    />\n  );\n}\n\nCardMask.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n};\n\n\n\n\nsetLocale({  \n  mixed: {\n    notType: function notType(_ref) {\n      switch (_ref.type) {\n        case 'number':\n          return 'deve ser um número';\n        case 'string':\n          return 'deve ser um texto';\n        default:\n          return 'formato errado';\n      }\n    },\n    default: 'é inválido',\n    required: 'Desculpe, este campo é obrigatório',\n    oneOf: 'deve ser um dos seguintes valores: ${values}',\n    notOneOf: 'não pode ser um dos seguintes valores: ${values}',\n  },\n  string: {\n      length: 'deve ter exatamente ${length} caracteres',\n      min: 'deve ter pelo menos ${min} caracteres',\n      max: 'deve ter no máximo ${max} caracteres',\n      email: 'Por favor, informe um e-mail inválido',\n      url: 'deve ter um formato de URL válida',\n      trim: 'não deve conter espaços no início ou no fim.',\n      lowercase: 'deve estar em maiúsculo',\n      uppercase: 'deve estar em minúsculo',\n  },\n  number: {\n      min: 'deve ser no mínimo ${min}',\n      max: 'deve ser no máximo ${max}',\n      lessThan: 'deve ser menor que ${less}',\n      moreThan: 'deve ser maior que ${more}',\n      notEqual: 'não pode ser igual à ${notEqual}',\n      positive: 'deve ser um número posítivo',\n      negative: 'deve ser um número negativo',\n      integer: 'deve ser um número inteiro',      \n  },\n      date: {\n      min: 'deve ser maior que a data ${min}',\n      max: 'deve ser menor que a data ${max}',\n  },\n      array: {\n      min: 'deve ter no mínimo ${min} itens',\n      max: 'deve ter no máximo ${max} itens',\n  }\n});\n\n\nconst regexCPF = /([0-9]{2}[\\.]?[0-9]{3}[\\.]?[0-9]{3}[\\/]?[0-9]{4}[-]?[0-9]{2})|([0-9]{3}[\\.]?[0-9]{3}[\\.]?[0-9]{3}[-]?[0-9]{2})/gm;\nfunction cpfValidate(cpf) {\n\tconsole.log(\"Validatring\", cpf);\n\treturn cpf.length > 10\n}\n\nfunction isValidCPF(cpf) {\n  if (typeof cpf !== \"string\") return false\n  cpf = cpf.replace(/[\\s.-]*/igm, '')\n  if (\n      !cpf ||\n      cpf.length != 11 ||\n      cpf == \"00000000000\" ||\n      cpf == \"11111111111\" ||\n      cpf == \"22222222222\" ||\n      cpf == \"33333333333\" ||\n      cpf == \"44444444444\" ||\n      cpf == \"55555555555\" ||\n      cpf == \"66666666666\" ||\n      cpf == \"77777777777\" ||\n      cpf == \"88888888888\" ||\n      cpf == \"99999999999\" \n  ) {\n      return false\n  }\n  var soma = 0\n  var resto\n  for (var i = 1; i <= 9; i++) \n      soma = soma + parseInt(cpf.substring(i-1, i)) * (11 - i)\n  resto = (soma * 10) % 11\n  if ((resto == 10) || (resto == 11))  resto = 0\n  if (resto != parseInt(cpf.substring(9, 10)) ) return false\n  soma = 0\n  for (var i = 1; i <= 10; i++) \n      soma = soma + parseInt(cpf.substring(i-1, i)) * (12 - i)\n  resto = (soma * 10) % 11\n  if ((resto == 10) || (resto == 11))  resto = 0\n  if (resto != parseInt(cpf.substring(10, 11) ) ) return false\n  return true\n}\n\nfunction isValidPhone(phone){\n  return /^(?:(?:\\+|00)?(55)\\s?)?(?:\\(?([1-9][0-9])\\)?\\s?)?(?:((?:9\\d|[2-9])\\d{3})\\-?(\\d{4}))$/.test(phone);\n}\n\nfunction isValidDate(date) {\n  return /^((((0?[1-9]|[12]\\d|3[01])[\\.\\-\\/](0?[13578]|1[02])      [\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|((0?[1-9]|[12]\\d|30)[\\.\\-\\/](0?[13456789]|1[012])[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|((0?[1-9]|1\\d|2[0-8])[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|(29[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00)))|(((0[1-9]|[12]\\d|3[01])(0[13578]|1[02])((1[6-9]|[2-9]\\d)?\\d{2}))|((0[1-9]|[12]\\d|30)(0[13456789]|1[012])((1[6-9]|[2-9]\\d)?\\d{2}))|((0[1-9]|1\\d|2[0-8])02((1[6-9]|[2-9]\\d)?\\d{2}))|(2902((1[6-9]|[2-9]\\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00))))$/.test(date);\n}\n\nfunction isValidDateCard(date) {\n  // return /^(0[1-9]|1[0-2])\\/?([0-9]{4}|[0-9]{2})$/.test(date);\n  return /^((0[1-9])|(1[0-2]))\\/((2009)|(20[1-2][0-9]))$/.test(date);\n}\n\nfunction getCardFlag(cardnumber) {\n  var cardnumber = cardnumber.replace(/[^0-9]+/g, '');\n\n  var cards = {\n      visa      : /^4[0-9]{12}(?:[0-9]{3})/,\n      mastercard : /^5[1-5][0-9]{14}/,\n      diners    : /^3(?:0[0-5]|[68][0-9])[0-9]{11}/,\n      amex      : /^3[47][0-9]{13}/,\n      discover  : /^6(?:011|5[0-9]{2})[0-9]{12}/,\n      hipercard  : /^(606282\\d{10}(\\d{3})?)|(3841\\d{15})/,\n      elo        : /^((((636368)|(438935)|(504175)|(451416)|(636297))\\d{0,10})|((5067)|(4576)|(4011))\\d{0,12})/,\n      jcb        : /^(?:2131|1800|35\\d{3})\\d{11}/,       \n      aura      : /^(5078\\d{2})(\\d{2})(\\d{11})$/     \n  };\n\n  for (var flag in cards) {\n      if(cards[flag].test(cardnumber)) {\n          return flag;\n      }\n  }       \n\n  return false;\n}\n\n\nyup.addMethod(yup.string, \"cpf\", function(message) {\n\t// return yup.mixed().test(\"cpf\", message || \"número de CPF inválido\", value => cpfValidate(value));\n\treturn yup.mixed().test(\"cpf\", message || \"número de CPF inválido\", value => isValidCPF(value));\n});\n\nyup.addMethod(yup.string, \"phone\", function(message) {\t\n\treturn yup.mixed().test(\"phone\", message || \"número de celular inválido\", value => isValidPhone(value));\n});\n\nyup.addMethod(yup.string, \"date\", function(message) {\t\n\treturn yup.mixed().test(\"date\", message || \"data inválida\", value => isValidDate(value));\n});\n\nyup.addMethod(yup.string, \"dateCard\", function(message) {\t\n\treturn yup.mixed().test(\"date\", message || \"Por favor, digite uma data válida\", value => isValidDateCard(value));\n});\n\nyup.addMethod(yup.string, \"card\", function(message) {\t\n\treturn yup.mixed().test(\"card\", message || \"Por favor, digite um número de cartão válido\", value => getCardFlag(value));\n});\n\n\n\nconst SignupSchema = yup.object().shape({  \n  id: yup\n    .string(),    \n  number: yup\n    .string()\n    .card()\n    .required(),  \n  name: yup\n    .string()\n    .required(),\n  validade: yup\n    .string()\n    .dateCard()\n    .required(),\n  cvv: yup\n    .string()\n    .matches(/^[0-9]{3}$/, 'Por favor, digite um CVV válido') \n    .required(),   \n  cpf: yup\n    .string()\n    .cpf(\"Por favor, informe um CPF válido\") \n    .required(),   \n     \n  \n\n\n});\n\n// const schema = yup.object().shape({\n//   first: yup.string().required(),\n//   age: yup.number().positive().integer().required(),\n// });\n\nexport default function SectionPayment(props) {\n  // const { register, errors, handleSubmit} = useForm({\n  //   validationSchema: SignupSchema\n  // });\n  const { register, getValues, trigger, handleSubmit, errors } = useForm({\n    resolver: yupResolver(SignupSchema),\n    mode: \"onBlur\"\n    // mode: \"onChange\"\n  });\n  const onSubmit = data => {\n    console.log(data);\n    // alert(JSON.stringify(data, null));\n  };\n\n\n  useEffect(() => {        \n    // history.pushState({}, null, \"/checkout/payment\");\n    TagManager.dataLayer({\n      dataLayer: {\n        event: \"paymentView\",\n        userId: '001',\n        userProject: 'project',\n        page: 'home'\n      },          \n    })\n\n    TagManager.dataLayer({\n      dataLayer: {\n        'event': 'checkoutOption',\n        'ecommerce': {\n          'checkout_option': {\n            'actionField': {'step': 2}\n          }\n        }       \n      },          \n    })\n\n    getPlan();\n\n  }, []);\n\n\n  const [checked, setChecked] = React.useState([]);\n  const handleToggle = value => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n    setChecked(newChecked);\n  };\n\n  const [isAluno, setIsAluno] = React.useState(false);\n  const [activeForm, setActiveForm] = React.useState(0);\n  // const [activeField, setActiveField] = React.useState(\"first\");\n  const [activeField, setActiveField] = React.useState([\"id\",\"number\",\"name\",\"validade\", \"cvv\", \"cpf\"]);\n  const [isDisableNext, setIsDisableNext] = React.useState(true);\n  const [error, setError] = useState(false);\n\n  const [activeCard, setActiveCard] = React.useState(nocard);\n\n  const [cardField, setCardField] = React.useState({    \n    number: \"0000 0000 0000 0000\",\n    name: \"NOME IMPRESSO NO CARTÃO\",\n    valid: \"00/00\",\n    cvv: \"000\", \n    cpf: \"\"   \n  });\n\n\n  const handleNext = async (type) => {\n\n    // console.log(activeField);\n    const result = await trigger(activeField)\n    // console.log(result);\n  \n\n    if(result) { \n      console.log(getValues());\n      const cardForm = getValues();\n      const codBrand= getBrandCod(cardForm.number);\n\n\n      if(activeForm == 0){   \n        \n        let hoje = new Date();\n        let dia = (\"0\" + (hoje.getDate())).slice(-2);\n        let mes = (\"0\" + (hoje.getMonth() + 1)).slice(-2);\n        let ano = hoje.getFullYear();\n        let anoFinal = hoje.getFullYear() + 1;\n\n        props.setDataSale( prevDataSale => {\n          return {  \n               \n              ...prevDataSale,\n              numeroCartao: cardForm.number.replace(/\\s+/g, ''),\n              nomeCartao: cardForm.name,\n              cvv: cardForm.cvv,\n              validade: cardForm.validade,\n              // brand: codBrand,\n              cpftitularcard: cardForm.cpf,              \n              anamnese:{\n                ...prevDataSale.anamnese,                \n                created_at: dia + \"/\" + mes + \"/\" + ano,\n                updated_at: dia + \"/\" + mes + \"/\" + ano,\n              },                  \n          }\n        });    \n        props.setStepCheckout(2);\n      }else {\n        setActiveForm((prevActiveStep) => prevActiveStep + 1);\n        handleFieldActive(activeForm + 1);                \n      }\n    }\n        \n\n  };\n\n  React.useEffect(() => {\n\n    // props.setDataSale( prevDataSale => {\n    //   return {  \n    //     customer: {     \n    //     ...prevDataSale.customer,\n    //     card : {\n    //       ...prevDataSale.card,\n    //       ...cardField \n    //     }  \n    //     }         \n    //   }\n    // });    \n\n    console.log(cardField.number.replace(/\\s+/g, ''));\n    \n  }, [ ]);\n\n\n\n  const handleBack = (type) => {\n\n    if(activeForm !== 0){\n      setActiveForm((prevActiveStep) => prevActiveStep - 1);  \n      handleFieldActive(activeForm - 1); \n    }else{\n      props.setStepCheckout(0);\n    }\n\n  };\n\n  const handleFocus = (event) => {\n    // event.target.select()\n\n    if(event.target.value == \"\"){      \n      event.target.selectionStart = 0;\n      event.target.selectionEnd = 0;      \n    } else {\n      event.target.select();      \n    }\n    \n  };\n\n\n  const handleFieldActive = (step) => {\n\n    console.log(\"handleFieldActive\");\n\n    switch (step) {\n      case 0:       \n        setActiveField([\"id\",\"number\",\"name\",\"validade\", \"cvv\", \"cpf\"]);\n        break;\n      case 1:\n        setActiveField([\"nome\",\"email\",\"telefone\",\"dataNascimento\"]);\n        break;      \n      case 2:\n        setActiveField([\"cep\",\"endereco\",\"numero\", \"complemento\",\"bairro\", \"estado\", \"cidade\"]);\n        break;      \n      default:\n        setActiveField([\"id\",\"number\",\"name\",\"validade\", \"cvv\"]);\n        break;\n    }\n\n    console.log(step);\n    // console.log(activeField);\n\n  };\n\n\n  \n  \n  const [payment, setPayment] = React.useState({\n    \"paymentMethod\": \"creditCard\",\n    \"card\": {\n\t\t\t\"id\": 123456,\n\t\t\t\"number\": \"5464082622239784\",\n\t\t\t\"name\": \"nome no cartão\",\n\t\t\t\"valid\": \"12/2022\",\n      \"cvv\": \"782\",\n      \"brand\": 1\n\t\t}\n\n  });\n\n\n\n\n  const getPlan = async () => {    \n    await axios.get(`https://admin.justfit.com.br/app.justfit/api/iAPIClicou/planosUnidade?codUnidade=1`)\n      .then(res => {        \n        console.log(res.data);\n        props.setDataSale( prevDataSale => {\n          return {                 \n            ...prevDataSale,\n            unidade: 1,\n            plano: res.data.planos[0].codigo                     \n          }\n        });            \n        \n      })\n      .catch((error) => {\n        console.log(error);\n        setError(true);\n      })      \n  };\n\n\n  const getBrandCod = (numberCard) => {\n    let brandCard = getCardFlag(numberCard);\n    switch (brandCard) {\n      case \"visa\":                \n        return 1;\n        break;\n      case \"mastercard\":        \n        return 2;\n        break;      \n      case \"diners\":        \n        return 3;\n        break;  \n      case \"amex\":        \n        return 4;\n        break;    \n      case \"discover\":        \n        return 8;\n        break;    \n      case \"hipercard\":        \n        return 9;\n        break;    \n      case \"elo\":        \n        return 6;\n        break;    \n      case \"jcb\":        \n        return 7;\n        break;    \n      case \"aura\":        \n        return 5;\n        break;      \n      default:\n        return 0;        \n        break    \n      }\n  }\n\n  const handlerOnBlur = (event) => {\n    let brandCard = getCardFlag(event.target.value);\n\n    let brandCod = 0\n    // handleFocus(event);\n\n    switch (brandCard) {\n      case \"visa\":        \n        setActiveCard(visa);\n        brandCod = 1;\n        break;\n      case \"mastercard\":\n        setActiveCard(mastercard);\n        brandCod = 2;\n        break;      \n      case \"diners\":\n        setActiveCard(diners);\n        brandCod = 3;\n        break;  \n      case \"amex\":        \n        setActiveCard(amex);\n        brandCod = 4;\n        break;    \n      case \"discover\":        \n        setActiveCard(discover);\n        brandCod = 8;\n        break;    \n      case \"hipercard\":        \n        setActiveCard(hipercard);\n        brandCod = 9;\n        break;    \n      case \"elo\":        \n        setActiveCard(elo);\n        brandCod = 6;\n        break;    \n      case \"jcb\":        \n        setActiveCard(jcb);\n        brandCod = 7;\n        break;    \n      case \"aura\":        \n        setActiveCard(aura);\n        brandCod = 5;\n        break;      \n      default:\n        setActiveCard(nocard);\n        break;\n    }\n\n    console.log(brandCod);\n\n    setCardField( {\n      number: getValues(\"number\"),\n      name: getValues(\"name\"),\n      valid: getValues(\"validade\"),\n      cvv: getValues(\"cvv\"),\n      brand: brandCod\n\n    })\n\n\n  }\n  const handlerOnChange = (event) => {\n    setCardField( {\n      number: getValues(\"number\"),\n      name: getValues(\"name\"),\n      valid: getValues(\"validade\"),\n      cvv: getValues(\"cvv\")\n    })\n\n  }\n\n\n  const getCardFlag = (cardnumber) => {\n    var cardnumber = cardnumber.replace(/[^0-9]+/g, '');\n\n\n    var cards = {\n        visa      : /^4[0-9]{12}(?:[0-9]{3})/,\n        mastercard : /^5[1-5][0-9]{14}/,\n        diners    : /^3(?:0[0-5]|[68][0-9])[0-9]{11}/,\n        amex      : /^3[47][0-9]{13}/,\n        discover  : /^6(?:011|5[0-9]{2})[0-9]{12}/,\n        hipercard  : /^(606282\\d{10}(\\d{3})?)|(3841\\d{15})/,\n        elo        : /^((((636368)|(438935)|(504175)|(451416)|(636297))\\d{0,10})|((5067)|(4576)|(4011))\\d{0,12})/,\n        jcb        : /^(?:2131|1800|35\\d{3})\\d{11}/,       \n        aura      : /^(5078\\d{2})(\\d{2})(\\d{11})$/     \n    };\n\n    for (var flag in cards) {\n        if(cards[flag].test(cardnumber)) {\n            return flag;\n        }\n    }       \n\n    return nocard;\n}\n\n\n\n\n  const classes = useStyles();\n  return (\n    <div className=\"cd-section\" >\n      {/* Contact us 1 START */}\n      <div\n        className={classes.contacts + \" \" + classes.section}\n        // style={{ backgroundImage: `url(${city})` }}\n        style={{ backgroundColor: \"#ffffff\" }}\n      >\n        <div className={classes.container}>\n          <GridContainer justify=\"center\">\n            {/* <GridItem xs={12} sm={12} md={8} className={classes.mlAuto}> */}\n            <Box clone order={{ xs: 2, sm: 2, md: 1 }}>\n              <GridItem xs={12} sm={12} md={5}>\n                <Grow \n                  in={true}\n                  style={{ transformOrigin: '0 0 0' }}\n                  {...(true ? { timeout: 1000 } : {})}\n                >\n                  <Card className={classes.card1}>\n                  <form onSubmit={handleSubmit(onSubmit)}>\n                    <CardHeader\n                      contact\n                      color=\"primary\"\n                      className={classes.textCenter}\n                    >\n                      <h4 className={classes.cardTitle}>Pagamento</h4>\n                    </CardHeader>\n\n                    \n                    <Grow \n                      in={activeForm === 0}\n                      style={{ transformOrigin: '0 0 0', display: activeForm === 0 ? \"block\" : \"none\" }}\n                      {...(activeForm === 0 ? { timeout: 1000 } : {})}\n                    >\n\n                      <CardBody>\n\n                      {error && ( \n                        <SnackbarContent\n                          message={\n                            <span>\n                              <b>Não encontramos seu CEP</b> <br/> Tente novamente\n                            </span>\n                          }\n                          // close\n                          color=\"warning\"\n                          icon=\"info_outline\"\n                        />\n                      )} \n\n                      <Card color=\"info\" className={classes.containerCart}>\n                        <CardBody color className={classes.noPaddingBottom}>\n                          {/* <div className={classes.containerCart}> */}\n                            <h5 className={classes.cardCategorySocialWhite}>\n                              <img src={chipCard}></img>\n                              \n                            </h5>\n                            <h4 className={classes.cardTitleWhite}>\n                              {cardField.number}\n                            </h4>\n                            <h4 className={classes.cardTitleWhite}>\n                              {cardField.name}\n                            </h4>\n                          {/* </div> */}\n                        </CardBody>\n                        <CardFooter>\n                          <div>\n                            <a href=\"#pablo\" onClick={e => e.preventDefault()}>                            \n                              <span>Valid</span> {cardField.valid} &nbsp; &nbsp;\n                              <span>CVV</span> {cardField.cvv}\n                            </a>\n                          </div>\n                          <div\n                            className={classes.statsWhite + \" \" + classes.mlAuto}\n                          >\n                            <img src={activeCard}></img>                    \n                          </div>\n                        </CardFooter>\n                      </Card>\n\n                        <GridContainer justify=\"center\" className={ classes.containerFieldsCard }> \n                          <GridItem xs={12} sm={12} md={12}>\n                            <CustomInput\n                              labelText=\"Número do cartão *\"\n                              labelError={errors.number && errors.number.message}                          \n                              error={errors.number ? true : false}\n                              id=\"number\"\n                              formControlProps={{\n                                fullWidth: true\n                              }}\n                              inputProps={{\n                                type: \"tel\",\n                                name: \"number\",\n                                inputRef: register,\n                                onClick: handleFocus,                              \n                                inputComponent: CardMask,\n                                onBlur: handlerOnBlur,\n                                // startAdornment: (\n                                //   <InputAdornment position=\"start\">\n                                //     <AssignmentInd className={classes.inputIconsColor} />\n                                //   </InputAdornment>\n                                // )                           \n                              }}\n                            />  \n                          </GridItem>                   \n                          <GridItem xs={12} sm={12} md={12}>\n                          \n                            <CustomInput\n                              labelText=\"Nome impresso no cartão\"\n                              labelError={errors.name && errors.name.message}                          \n                              error={errors.name ? true : false}\n                              id=\"name\"\n                              formControlProps={{\n                                fullWidth: true\n                              }}                            \n                              inputProps={{\n                                name: \"name\",\n                                inputRef: register,\n                                onChange: handlerOnChange,                                                           \n                              }}\n                            />   \n                          </GridItem>\n                          <GridItem xs={12} sm={12} md={6}>                                                            \n                            <CustomInput\n                              labelText=\"Validade (MM/AAAA)\"\n                              labelError={errors.validade && errors.validade.message}                          \n                              error={errors.validade ? true : false}\n                              id=\"validade\"\n                              formControlProps={{\n                                fullWidth: true\n                              }}\n                              inputProps={{\n                                type: \"tel\",\n                                name: \"validade\",\n                                inputRef: register,  \n                                onClick: handleFocus,                              \n                                inputComponent: ValidadeMask,\n                                onChange: handlerOnChange,                                                                                                              \n                              }}\n                            /> \n                          </GridItem> \n                          <GridItem xs={12} sm={12} md={6}>                                                             \n                            <CustomInput\n                              labelText=\"CVV\"\n                              labelError={errors.cvv && errors.cvv.message}                          \n                              error={errors.cvv ? true : false}\n                              id=\"cvv\"\n                              formControlProps={{\n                                fullWidth: true\n                              }}\n                              inputProps={{\n                                type: \"tel\",\n                                name: \"cvv\",\n                                inputRef: register,                                \n                                onClick: handleFocus,                              \n                                inputComponent: CVVMask,\n                                onChange: handlerOnChange,\n                              }}\n                            />        \n                          </GridItem>   \n                          <GridItem xs={12} sm={12} md={12}>\n                          \n                            <CustomInput\n                              labelText=\"CPF do titular do cartão\"\n                              labelError={errors.cpf && errors.cpf.message}                          \n                              error={errors.cpf ? true : false}\n                              id=\"cpf\"\n                              formControlProps={{\n                                fullWidth: true\n                              }}                            \n                              inputProps={{\n                                name: \"cpf\",\n                                inputRef: register,                                    \n                                inputComponent: TextMaskCustom                                                    \n                              }}\n                            />   \n                          </GridItem>\n                          \n                        </GridContainer>                 \n                    \n                      </CardBody>\n\n                    </Grow>\n\n                    {/* <CardFooter className={classes.justifyContentBetween}>    */}\n                    <CardFooter className={classes.textCenter}>   \n                      <GridContainer justify=\"center\" style={{ margin: \"0\", width: \"100%\" }}> \n                        {/* <GridItem xs={12} sm={12} md={12}>\n                          <FormControl required error={errors.checkboxInput} component=\"fieldset\" className={classes.formControl}>                      \n                            <FormGroup>\n\n                              <FormControlLabel\n                                control={\n                                  <Checkbox\n                                    tabIndex={-1}\n                                    onClick={() => handleToggle(1)}\n                                    checkedIcon={\n                                      <Check className={classes.checkedIcon} />\n                                    }\n                                    icon={<Check className={classes.uncheckedIcon} />}\n                                    classes={{\n                                      checked: classes.checked,\n                                      root: classes.checkRoot\n                                    }}\n                                    name=\"checkboxInput\"\n                                    inputRef={ register }                          \n                                  />\n                                }                      \n                                classes={{ label: classes.label }}\n                                label=\"I'm not a robot\"\n                              />  \n                            </FormGroup>\n                            <FormHelperText>{errors.checkboxInput ? errors.checkboxInput.message : \"\"}</FormHelperText>\n                          </FormControl>                 \n                        </GridItem>  */}\n                        <GridItem xs={12} sm={12} md={12}>\n\n                          {/* <Button type=\"submit\" color=\"primary\" className={classes.pullRight}>\n                            Send Message\n                          </Button> */}\n                          \n\n                          {/* <Button color=\"primary\" disabled className={classes.pullRight} onClick={handleNext}> */}\n                          <Button color=\"primary\" fullWidth onClick={handleNext}>\n                            Próximo\n                          </Button>\n                                                  \n                          \n                        </GridItem> \n                        <GridItem xs={12} sm={12} md={12}>\n\n                          {/* <Button type=\"submit\" color=\"primary\" className={classes.pullRight}>\n                            Send Message\n                          </Button> */}\n                          \n                          \n                          {/* <Button color=\"primary\" className={classes.pullRight} onClick={ () => setIsAluno(!isAluno) }> */}\n                          {/* <Button color=\"primary\" className={classes.pullRight} onClick={handleBack}> */}\n                          <Button simple color=\"primary\" fullWidth onClick={handleBack}>\n                            Voltar\n                          </Button>\n                          \n                        </GridItem> \n                      </GridContainer>  \n                      \n                    </CardFooter>\n                  </form>\n                </Card>\n                </Grow>\n              </GridItem>\n            </Box>\n            \n            <Box clone order={{ xs: 1, sm: 1, md: 2 }}>\n              <GridItem xs={12} sm={12} md={4}>\n                <Grow \n                  in={true}\n                  style={{ transformOrigin: '0 0 0' }}\n                  {...(true ? { timeout: 1000 } : {})}\n                >\n                  <Card className={classes.card1}>\n                  <form onSubmit={handleSubmit(onSubmit)}>\n                    <CardHeader\n                      contact\n                      color=\"primary\"\n                      className={classes.textCenter}\n                    >\n                      <h4 className={classes.cardTitle}>Resumo</h4>\n                    </CardHeader>\n\n                    \n                    <Grow \n                      in={activeForm === 0}\n                      style={{ transformOrigin: '0 0 0', display: activeForm === 0 ? \"block\" : \"none\" }}\n                      {...(activeForm === 0 ? { timeout: 1000 } : {})}\n                    >\n\n                      <CardBody>\n\n                      {error && ( \n                        <SnackbarContent\n                          message={\n                            <span>\n                              <b>Não encontramos seu CEP</b> <br/> Tente novamente\n                            </span>\n                          }\n                          // close\n                          color=\"warning\"\n                          icon=\"info_outline\"\n                        />\n                      )} \n\n                        <GridContainer justify=\"center\"> \n                          <GridItem xs={12} sm={12} md={12}>\n                            <Card pricing plain className={classes.marginZero}>\n                              <CardBody pricing plain>\n                                <h5 className={classes.cardCategory} style={{ color: \"#425cc7\" }}>Plano Anual Start</h5>\n                                <hr/>\n                                <small style={{ fontSize: \"1rem\" }}>{'\\u00A0'} 12 parcelas mensais de</small>\n                                <h1 className={classes.cardTitle} style={{ color: \"#425cc7\", marginTop: \"0.75rem\", marginBottom: \"0 !important\" }}>\n                                  <small style={{ color: \"#425cc7\" }}>R$</small> 39,90 \n                                </h1>\n                                <small style={{ fontSize: \"0.7rem\" }}>{'\\u00A0'} Valor anual do plano: R$ 478,80</small>\n                                <ul className={classes.itensResumo}>\n                                  <li>\n                                    <Check/> Treinos Personalizados\n                                  </li>\n                                  <li>\n                                    <Check/> Acompanhamento em Grupo\n                                  </li>\n                                  <li>\n                                    <Check/> Vídeos Explicativos por Exercício\n                                  </li>                                  \n                                  <li>\n                                    <Check/> Master Classes Ao Vivo 1x/semana\n                                  </li>\n                                </ul>\n                              </CardBody>\n              \n                            </Card>\n                          </GridItem>                                        \n                        </GridContainer>                 \n                    \n                      </CardBody>\n\n                    </Grow>\n                  </form>\n                </Card>\n                </Grow>\n              </GridItem>\n            </Box>\n          </GridContainer>\n        </div>\n      </div>\n      {/* Contact us 1 END */}\n    </div>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AADA;AACA;AAIA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AADA;AACA;AAGA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AADA;AACA;AAIA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAzCA;AAgDA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAcA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AAIA;AAGA;AAIA;AAIA;AAlBA;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAJA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AADA;AAFA;AADA;AAWA;AAEA;AACA;AAxCA;AAAA;AAAA;AAAA;AACA;AA0CA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AArDA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAgEA;AACA;AACA;AACA;AACA;AALA;AA/DA;AAAA;AAAA;AACA;AAuEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAHA;AATA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA+CA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAZA;AACA;AAcA;AAGA;AACA;AA3LA;AAgMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AA/LA;AAAA;AAAA;AACA;AA8MA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAmBA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AA9BA;AAgCA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAvCA;AACA;AAyuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcuBA;;;;A","sourceRoot":""}